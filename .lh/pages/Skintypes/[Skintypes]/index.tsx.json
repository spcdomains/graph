{
    "sourceFile": "pages/Skintypes/[Skintypes]/index.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 41,
            "patches": [
                {
                    "date": 1723801981849,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1723809346144,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,8 +4,9 @@\n import { useRouter } from \"next/router\";\r\n import Image from \"next/image\";\r\n import Modal from \"../../../Components/Modal\";\r\n import Sell from \"../../../Components/Sell\";\r\n+import Link from \"next/link\";\r\n \r\n interface Castle {\r\n   _id: string;\r\n   photo: string[];\r\n@@ -152,9 +153,11 @@\n     <>\r\n       <div style={{ display: \"flex\" }}>\r\n         <div className={styles.cardContainer}>\r\n           {castlesData.map((castle) => (\r\n+            <Link href={\"https://wa.me/919560498178\"}>\r\n             <div key={castle._id} className={styles.card}>\r\n+\r\n               <Image\r\n                 src={castle.photo[0]}\r\n                 alt={castle.skintype || \"Castle Image\"}\r\n                 className={styles.cardImage}\r\n@@ -200,8 +203,9 @@\n                   </div>\r\n                 </div>\r\n               </div>\r\n             </div>\r\n+            </Link>\r\n           ))}\r\n         </div>\r\n       </div>\r\n       <Modal\r\n"
                },
                {
                    "date": 1723809401317,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -153,9 +153,9 @@\n     <>\r\n       <div style={{ display: \"flex\" }}>\r\n         <div className={styles.cardContainer}>\r\n           {castlesData.map((castle) => (\r\n-            <Link href={\"https://wa.me/919560498178\"}>\r\n+            <Link href={\"https://wa.me/919560498178\"} style={{textDecoration:\"none\"}}>\r\n             <div key={castle._id} className={styles.card}>\r\n \r\n               <Image\r\n                 src={castle.photo[0]}\r\n"
                },
                {
                    "date": 1723809455161,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -153,9 +153,9 @@\n     <>\r\n       <div style={{ display: \"flex\" }}>\r\n         <div className={styles.cardContainer}>\r\n           {castlesData.map((castle) => (\r\n-            <Link href={\"https://wa.me/919560498178\"} style={{textDecoration:\"none\"}}>\r\n+            <Link href={\"https://wa.me/97298180856\"} style={{textDecoration:\"none\"}}>\r\n             <div key={castle._id} className={styles.card}>\r\n \r\n               <Image\r\n                 src={castle.photo[0]}\r\n"
                },
                {
                    "date": 1723809551590,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -153,9 +153,9 @@\n     <>\r\n       <div style={{ display: \"flex\" }}>\r\n         <div className={styles.cardContainer}>\r\n           {castlesData.map((castle) => (\r\n-            <Link href={\"https://wa.me/97298180856\"} style={{textDecoration:\"none\"}}>\r\n+            <Link href={\"https://wa.me/9599728762\"} style={{textDecoration:\"none\"}}>\r\n             <div key={castle._id} className={styles.card}>\r\n \r\n               <Image\r\n                 src={castle.photo[0]}\r\n"
                },
                {
                    "date": 1723809653328,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -153,9 +153,9 @@\n     <>\r\n       <div style={{ display: \"flex\" }}>\r\n         <div className={styles.cardContainer}>\r\n           {castlesData.map((castle) => (\r\n-            <Link href={\"https://wa.me/9599728762\"} style={{textDecoration:\"none\"}}>\r\n+            <Link href={\"https://wa.me/919599728762\"} style={{textDecoration:\"none\"}}>\r\n             <div key={castle._id} className={styles.card}>\r\n \r\n               <Image\r\n                 src={castle.photo[0]}\r\n"
                },
                {
                    "date": 1723812239939,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,16 +31,17 @@\n   const [castlesData, setCastlesData] = useState<Castle[]>([]);\r\n   const [showModal, setShowModal] = useState<boolean>(false);\r\n   const [showSell, setShowSell] = useState<boolean>(false);\r\n   const [currentCastle, setCurrentCastle] = useState<Castle | null>(null);\r\n-  const [allow, setallow] = useState(false);\r\n+  const [allow, setAllow] = useState(false);\r\n \r\n   useEffect(() => {\r\n     const admin = localStorage.getItem(\"role\");\r\n-    if (admin == \"admin\") {\r\n-      setallow(true);\r\n+    if (admin === \"admin\") {\r\n+      setAllow(true);\r\n     }\r\n   }, []);\r\n+  \r\n   const router = useRouter();\r\n   const { Skintypes } = router.query;\r\n \r\n   useEffect(() => {\r\n@@ -153,58 +154,57 @@\n     <>\r\n       <div style={{ display: \"flex\" }}>\r\n         <div className={styles.cardContainer}>\r\n           {castlesData.map((castle) => (\r\n-            <Link href={\"https://wa.me/919599728762\"} style={{textDecoration:\"none\"}}>\r\n-            <div key={castle._id} className={styles.card}>\r\n-\r\n-              <Image\r\n-                src={castle.photo[0]}\r\n-                alt={castle.skintype || \"Castle Image\"}\r\n-                className={styles.cardImage}\r\n-                width={500}\r\n-                height={300}\r\n-              />\r\n-              <div className={styles.cardContent}>\r\n-                <h2 className={styles.cardTitle}>\r\n-                  {toTitleCase(castle.skintype)}\r\n-                </h2>\r\n-                <p className={styles.cardText}>\r\n-                  <strong>Quantity:</strong> {castle.quantity}\r\n-                </p>\r\n-                <p className={styles.cardText}>\r\n-                  <strong>Castles:</strong> {castle.castles.join(\", \")}\r\n-                </p>\r\n-                {castle.buff && castle.buff.length > 0 && (\r\n+            <Link key={castle._id} href={\"https://wa.me/919599728762\"} style={{ textDecoration: \"none\" }}>\r\n+              <div key={castle._id} className={styles.card}>\r\n+                <Image\r\n+                  src={castle.photo[0]}\r\n+                  alt={castle.skintype || \"Castle Image\"}\r\n+                  className={styles.cardImage}\r\n+                  width={500}\r\n+                  height={300}\r\n+                />\r\n+                <div className={styles.cardContent}>\r\n+                  <h2 className={styles.cardTitle}>\r\n+                    {toTitleCase(castle.skintype)}\r\n+                  </h2>\r\n                   <p className={styles.cardText}>\r\n-                    <strong>Buff:</strong>\r\n-                    {castle.buff.map((buffObject: any, index: any) => (\r\n-                      <div key={index}>\r\n-                        {Object.entries(buffObject).map(\r\n-                          ([buffName, buffValue]: any, idx) => (\r\n-                            <div key={idx}>\r\n-                              <strong>{buffName}:</strong> {buffValue}%\r\n-                            </div>\r\n-                          )\r\n-                        )}\r\n-                      </div>\r\n-                    ))}\r\n+                    <strong>Quantity:</strong> {castle.quantity}\r\n                   </p>\r\n-                )}\r\n-                <div className={styles.btn}>\r\n-                  <div className={styles.left}>\r\n-                    {allow && (\r\n-                      <button onClick={() => handleEdit(castle)}>Edit</button>\r\n-                    )}\r\n+                  <p className={styles.cardText}>\r\n+                    <strong>Castles:</strong> {castle.castles.join(\", \")}\r\n+                  </p>\r\n+                  {castle.buff && castle.buff.length > 0 && (\r\n+                    <p className={styles.cardText}>\r\n+                      <strong>Buff:</strong>\r\n+                      {castle.buff.map((buffObject: any, index: number) => (\r\n+                        <div key={index}>\r\n+                          {Object.entries(buffObject).map(\r\n+                            ([buffName, buffValue]: any, idx: number) => (\r\n+                              <div key={idx}>\r\n+                                <strong>{buffName}:</strong> {buffValue}%\r\n+                              </div>\r\n+                            )\r\n+                          )}\r\n+                        </div>\r\n+                      ))}\r\n+                    </p>\r\n+                  )}\r\n+                  <div className={styles.btn}>\r\n+                    <div className={styles.left}>\r\n+                      {allow && (\r\n+                        <button onClick={() => handleEdit(castle)}>Edit</button>\r\n+                      )}\r\n+                    </div>\r\n+                    <div>\r\n+                      {allow && (\r\n+                        <button onClick={() => handleSell(castle)}>Sell</button>\r\n+                      )}\r\n+                    </div>\r\n                   </div>\r\n-                  <div>\r\n-                    {allow && (\r\n-                      <button onClick={() => handleSell(castle)}>Sell</button>\r\n-                    )}\r\n-                  </div>\r\n                 </div>\r\n               </div>\r\n-            </div>\r\n             </Link>\r\n           ))}\r\n         </div>\r\n       </div>\r\n"
                },
                {
                    "date": 1723814470078,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -170,11 +170,12 @@\n                   </h2>\r\n                   <p className={styles.cardText}>\r\n                     <strong>Quantity:</strong> {castle.quantity}\r\n                   </p>\r\n-                  <p className={styles.cardText}>\r\n+                  {allow && ( <p className={styles.cardText}>\r\n                     <strong>Castles:</strong> {castle.castles.join(\", \")}\r\n                   </p>\r\n+                    )}\r\n                   {castle.buff && castle.buff.length > 0 && (\r\n                     <p className={styles.cardText}>\r\n                       <strong>Buff:</strong>\r\n                       {castle.buff.map((buffObject: any, index: number) => (\r\n"
                },
                {
                    "date": 1723815121049,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -167,11 +167,12 @@\n                 <div className={styles.cardContent}>\r\n                   <h2 className={styles.cardTitle}>\r\n                     {toTitleCase(castle.skintype)}\r\n                   </h2>\r\n-                  <p className={styles.cardText}>\r\n+                  {allow && ( <p className={styles.cardText}>\r\n                     <strong>Quantity:</strong> {castle.quantity}\r\n                   </p>\r\n+                     )}\r\n                   {allow && ( <p className={styles.cardText}>\r\n                     <strong>Castles:</strong> {castle.castles.join(\", \")}\r\n                   </p>\r\n                     )}\r\n"
                },
                {
                    "date": 1723876355960,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -154,32 +154,34 @@\n     <>\r\n       <div style={{ display: \"flex\" }}>\r\n         <div className={styles.cardContainer}>\r\n           {castlesData.map((castle) => (\r\n-            <Link key={castle._id} href={\"https://wa.me/919599728762\"} style={{ textDecoration: \"none\" }}>\r\n-              <div key={castle._id} className={styles.card}>\r\n-                <Image\r\n-                  src={castle.photo[0]}\r\n-                  alt={castle.skintype || \"Castle Image\"}\r\n-                  className={styles.cardImage}\r\n-                  width={500}\r\n-                  height={300}\r\n-                />\r\n-                <div className={styles.cardContent}>\r\n-                  <h2 className={styles.cardTitle}>\r\n-                    {toTitleCase(castle.skintype)}\r\n-                  </h2>\r\n-                  {allow && ( <p className={styles.cardText}>\r\n-                    <strong>Quantity:</strong> {castle.quantity}\r\n-                  </p>\r\n-                     )}\r\n-                  {allow && ( <p className={styles.cardText}>\r\n-                    <strong>Castles:</strong> {castle.castles.join(\", \")}\r\n-                  </p>\r\n-                    )}\r\n-                  {castle.buff && castle.buff.length > 0 && (\r\n+            <div key={castle._id} className={styles.card}>\r\n+              <Image\r\n+                src={castle.photo[0]}\r\n+                alt={castle.skintype || \"Castle Image\"}\r\n+                className={styles.cardImage}\r\n+                width={500}\r\n+                height={300}\r\n+              />\r\n+              <div className={styles.cardContent}>\r\n+                <h2 className={styles.cardTitle}>\r\n+                  {toTitleCase(castle.skintype)}\r\n+                </h2>\r\n+                {allow && (\r\n+                  <>\r\n                     <p className={styles.cardText}>\r\n-                      <strong>Buff:</strong>\r\n+                      <strong>Quantity:</strong> {castle.quantity}\r\n+                    </p>\r\n+                    <p className={styles.cardText}>\r\n+                      <strong>Castles:</strong> {castle.castles.join(\", \")}\r\n+                    </p>\r\n+                  </>\r\n+                )}\r\n+                {castle.buff && castle.buff.length > 0 && (\r\n+                  <div className={styles.dropdown}>\r\n+                    <button className={styles.dropbtn}>Show Buffs</button>\r\n+                    <div className={styles.dropdownContent}>\r\n                       {castle.buff.map((buffObject: any, index: number) => (\r\n                         <div key={index}>\r\n                           {Object.entries(buffObject).map(\r\n                             ([buffName, buffValue]: any, idx: number) => (\r\n@@ -189,25 +191,25 @@\n                             )\r\n                           )}\r\n                         </div>\r\n                       ))}\r\n-                    </p>\r\n-                  )}\r\n-                  <div className={styles.btn}>\r\n-                    <div className={styles.left}>\r\n-                      {allow && (\r\n-                        <button onClick={() => handleEdit(castle)}>Edit</button>\r\n-                      )}\r\n                     </div>\r\n-                    <div>\r\n-                      {allow && (\r\n-                        <button onClick={() => handleSell(castle)}>Sell</button>\r\n-                      )}\r\n-                    </div>\r\n                   </div>\r\n+                )}\r\n+                <div className={styles.btn}>\r\n+                  <div className={styles.left}>\r\n+                    {allow && (\r\n+                      <button onClick={() => handleEdit(castle)}>Edit</button>\r\n+                    )}\r\n+                  </div>\r\n+                  <div>\r\n+                    {allow && (\r\n+                      <button onClick={() => handleSell(castle)}>Sell</button>\r\n+                    )}\r\n+                  </div>\r\n                 </div>\r\n               </div>\r\n-            </Link>\r\n+            </div>\r\n           ))}\r\n         </div>\r\n       </div>\r\n       <Modal\r\n"
                },
                {
                    "date": 1723876372438,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -154,34 +154,32 @@\n     <>\r\n       <div style={{ display: \"flex\" }}>\r\n         <div className={styles.cardContainer}>\r\n           {castlesData.map((castle) => (\r\n-            <div key={castle._id} className={styles.card}>\r\n-              <Image\r\n-                src={castle.photo[0]}\r\n-                alt={castle.skintype || \"Castle Image\"}\r\n-                className={styles.cardImage}\r\n-                width={500}\r\n-                height={300}\r\n-              />\r\n-              <div className={styles.cardContent}>\r\n-                <h2 className={styles.cardTitle}>\r\n-                  {toTitleCase(castle.skintype)}\r\n-                </h2>\r\n-                {allow && (\r\n-                  <>\r\n+            <Link key={castle._id} href={\"https://wa.me/919599728762\"} style={{ textDecoration: \"none\" }}>\r\n+              <div key={castle._id} className={styles.card}>\r\n+                <Image\r\n+                  src={castle.photo[0]}\r\n+                  alt={castle.skintype || \"Castle Image\"}\r\n+                  className={styles.cardImage}\r\n+                  width={500}\r\n+                  height={300}\r\n+                />\r\n+                <div className={styles.cardContent}>\r\n+                  <h2 className={styles.cardTitle}>\r\n+                    {toTitleCase(castle.skintype)}\r\n+                  </h2>\r\n+                  {allow && ( <p className={styles.cardText}>\r\n+                    <strong>Quantity:</strong> {castle.quantity}\r\n+                  </p>\r\n+                     )}\r\n+                  {allow && ( <p className={styles.cardText}>\r\n+                    <strong>Castles:</strong>  {castle.castles.join(\", \")}\r\n+                  </p>\r\n+                    )}\r\n+                  {castle.buff && castle.buff.length > 0 && (\r\n                     <p className={styles.cardText}>\r\n-                      <strong>Quantity:</strong> {castle.quantity}\r\n-                    </p>\r\n-                    <p className={styles.cardText}>\r\n-                      <strong>Castles:</strong> {castle.castles.join(\", \")}\r\n-                    </p>\r\n-                  </>\r\n-                )}\r\n-                {castle.buff && castle.buff.length > 0 && (\r\n-                  <div className={styles.dropdown}>\r\n-                    <button className={styles.dropbtn}>Show Buffs</button>\r\n-                    <div className={styles.dropdownContent}>\r\n+                      <strong>Buff:</strong>\r\n                       {castle.buff.map((buffObject: any, index: number) => (\r\n                         <div key={index}>\r\n                           {Object.entries(buffObject).map(\r\n                             ([buffName, buffValue]: any, idx: number) => (\r\n@@ -191,25 +189,25 @@\n                             )\r\n                           )}\r\n                         </div>\r\n                       ))}\r\n+                    </p>\r\n+                  )}\r\n+                  <div className={styles.btn}>\r\n+                    <div className={styles.left}>\r\n+                      {allow && (\r\n+                        <button onClick={() => handleEdit(castle)}>Edit</button>\r\n+                      )}\r\n                     </div>\r\n+                    <div>\r\n+                      {allow && (\r\n+                        <button onClick={() => handleSell(castle)}>Sell</button>\r\n+                      )}\r\n+                    </div>\r\n                   </div>\r\n-                )}\r\n-                <div className={styles.btn}>\r\n-                  <div className={styles.left}>\r\n-                    {allow && (\r\n-                      <button onClick={() => handleEdit(castle)}>Edit</button>\r\n-                    )}\r\n-                  </div>\r\n-                  <div>\r\n-                    {allow && (\r\n-                      <button onClick={() => handleSell(castle)}>Sell</button>\r\n-                    )}\r\n-                  </div>\r\n                 </div>\r\n               </div>\r\n-            </div>\r\n+            </Link>\r\n           ))}\r\n         </div>\r\n       </div>\r\n       <Modal\r\n"
                },
                {
                    "date": 1723876496089,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,10 +11,10 @@\n   _id: string;\r\n   photo: string[];\r\n   skintype: string;\r\n   quantity: any;\r\n-  castles: any;\r\n-  buff?: any;\r\n+  castles: string[]; // Changed to string[] for better type definition\r\n+  buff?: { [key: string]: any }[]; // Changed to an array of objects with string keys\r\n   customerName?: string;\r\n   quantitySold?: number;\r\n }\r\n \r\n@@ -154,60 +154,70 @@\n     <>\r\n       <div style={{ display: \"flex\" }}>\r\n         <div className={styles.cardContainer}>\r\n           {castlesData.map((castle) => (\r\n-            <Link key={castle._id} href={\"https://wa.me/919599728762\"} style={{ textDecoration: \"none\" }}>\r\n-              <div key={castle._id} className={styles.card}>\r\n-                <Image\r\n-                  src={castle.photo[0]}\r\n-                  alt={castle.skintype || \"Castle Image\"}\r\n-                  className={styles.cardImage}\r\n-                  width={500}\r\n-                  height={300}\r\n-                />\r\n-                <div className={styles.cardContent}>\r\n-                  <h2 className={styles.cardTitle}>\r\n-                    {toTitleCase(castle.skintype)}\r\n-                  </h2>\r\n-                  {allow && ( <p className={styles.cardText}>\r\n-                    <strong>Quantity:</strong> {castle.quantity}\r\n-                  </p>\r\n-                     )}\r\n-                  {allow && ( <p className={styles.cardText}>\r\n-                    <strong>Castles:</strong>  {castle.castles.join(\", \")}\r\n-                  </p>\r\n-                    )}\r\n-                  {castle.buff && castle.buff.length > 0 && (\r\n+            <div key={castle._id} className={styles.card}>\r\n+              <Image\r\n+                src={castle.photo[0]}\r\n+                alt={castle.skintype || \"Castle Image\"}\r\n+                className={styles.cardImage}\r\n+                width={500}\r\n+                height={300}\r\n+              />\r\n+              <div className={styles.cardContent}>\r\n+                <h2 className={styles.cardTitle}>\r\n+                  {toTitleCase(castle.skintype)}\r\n+                </h2>\r\n+                {allow && (\r\n+                  <>\r\n                     <p className={styles.cardText}>\r\n-                      <strong>Buff:</strong>\r\n-                      {castle.buff.map((buffObject: any, index: number) => (\r\n+                      <strong>Quantity:</strong> {castle.quantity}\r\n+                    </p>\r\n+                    <p className={styles.cardText}>\r\n+                      <strong>Castles:</strong>\r\n+                      <div className={styles.dropdown}>\r\n+                        <button className={styles.dropbtn}>Show Castles</button>\r\n+                        <div className={styles.dropdownContent}>\r\n+                          {castle.castles.map((castleName, index) => (\r\n+                            <a key={index} href=\"#\">\r\n+                              {castleName}\r\n+                            </a>\r\n+                          ))}\r\n+                        </div>\r\n+                      </div>\r\n+                    </p>\r\n+                  </>\r\n+                )}\r\n+                {castle.buff && castle.buff.length > 0 && (\r\n+                  <div className={styles.dropdown}>\r\n+                    <button className={styles.dropbtn}>Show Buffs</button>\r\n+                    <div className={styles.dropdownContent}>\r\n+                      {castle.buff.map((buffObject, index) => (\r\n                         <div key={index}>\r\n-                          {Object.entries(buffObject).map(\r\n-                            ([buffName, buffValue]: any, idx: number) => (\r\n-                              <div key={idx}>\r\n-                                <strong>{buffName}:</strong> {buffValue}%\r\n-                              </div>\r\n-                            )\r\n-                          )}\r\n+                          {Object.entries(buffObject).map(([buffName, buffValue], idx) => (\r\n+                            <div key={idx}>\r\n+                              <strong>{buffName}:</strong> {buffValue}\r\n+                            </div>\r\n+                          ))}\r\n                         </div>\r\n                       ))}\r\n-                    </p>\r\n-                  )}\r\n-                  <div className={styles.btn}>\r\n-                    <div className={styles.left}>\r\n-                      {allow && (\r\n-                        <button onClick={() => handleEdit(castle)}>Edit</button>\r\n-                      )}\r\n                     </div>\r\n-                    <div>\r\n-                      {allow && (\r\n-                        <button onClick={() => handleSell(castle)}>Sell</button>\r\n-                      )}\r\n-                    </div>\r\n                   </div>\r\n+                )}\r\n+                <div className={styles.btn}>\r\n+                  <div className={styles.left}>\r\n+                    {allow && (\r\n+                      <button onClick={() => handleEdit(castle)}>Edit</button>\r\n+                    )}\r\n+                  </div>\r\n+                  <div>\r\n+                    {allow && (\r\n+                      <button onClick={() => handleSell(castle)}>Sell</button>\r\n+                    )}\r\n+                  </div>\r\n                 </div>\r\n               </div>\r\n-            </Link>\r\n+            </div>\r\n           ))}\r\n         </div>\r\n       </div>\r\n       <Modal\r\n"
                },
                {
                    "date": 1723876644877,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -187,9 +187,9 @@\n                     </p>\r\n                   </>\r\n                 )}\r\n                 {castle.buff && castle.buff.length > 0 && (\r\n-                  <div className={styles.dropdown}>\r\n+                  <div className={styles.dropdown}>Buff:\r\n                     <button className={styles.dropbtn}>Show Buffs</button>\r\n                     <div className={styles.dropdownContent}>\r\n                       {castle.buff.map((buffObject, index) => (\r\n                         <div key={index}>\r\n"
                },
                {
                    "date": 1723876654828,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -187,9 +187,9 @@\n                     </p>\r\n                   </>\r\n                 )}\r\n                 {castle.buff && castle.buff.length > 0 && (\r\n-                  <div className={styles.dropdown}>Buff:\r\n+                  <div className={styles.dropdown}   <strong>Castles:</strong>\r\n                     <button className={styles.dropbtn}>Show Buffs</button>\r\n                     <div className={styles.dropdownContent}>\r\n                       {castle.buff.map((buffObject, index) => (\r\n                         <div key={index}>\r\n"
                },
                {
                    "date": 1723876674165,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -187,9 +187,9 @@\n                     </p>\r\n                   </>\r\n                 )}\r\n                 {castle.buff && castle.buff.length > 0 && (\r\n-                  <div className={styles.dropdown}   <strong>Castles:</strong>\r\n+                  <div className={styles.dropdown}>   <p className={styles.cardText}></p>  <strong>Castles:</strong>\r\n                     <button className={styles.dropbtn}>Show Buffs</button>\r\n                     <div className={styles.dropdownContent}>\r\n                       {castle.buff.map((buffObject, index) => (\r\n                         <div key={index}>\r\n"
                },
                {
                    "date": 1723876679578,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -187,9 +187,9 @@\n                     </p>\r\n                   </>\r\n                 )}\r\n                 {castle.buff && castle.buff.length > 0 && (\r\n-                  <div className={styles.dropdown}>   <p className={styles.cardText}></p>  <strong>Castles:</strong>\r\n+                  <div className={styles.dropdown}>   <p className={styles.cardText}> <strong>Castles:</strong></p> \r\n                     <button className={styles.dropbtn}>Show Buffs</button>\r\n                     <div className={styles.dropdownContent}>\r\n                       {castle.buff.map((buffObject, index) => (\r\n                         <div key={index}>\r\n"
                },
                {
                    "date": 1723876714796,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,9 +39,9 @@\n     if (admin === \"admin\") {\r\n       setAllow(true);\r\n     }\r\n   }, []);\r\n-  \r\n+\r\n   const router = useRouter();\r\n   const { Skintypes } = router.query;\r\n \r\n   useEffect(() => {\r\n@@ -187,21 +187,29 @@\n                     </p>\r\n                   </>\r\n                 )}\r\n                 {castle.buff && castle.buff.length > 0 && (\r\n-                  <div className={styles.dropdown}>   <p className={styles.cardText}> <strong>Castles:</strong></p> \r\n+                  <div className={styles.dropdown}>\r\n+                    {\" \"}\r\n+                    <p className={styles.cardText}>\r\n+                      {\" \"}\r\n+                      <strong>Castles:</strong>\r\n+                 \r\n                     <button className={styles.dropbtn}>Show Buffs</button>\r\n                     <div className={styles.dropdownContent}>\r\n                       {castle.buff.map((buffObject, index) => (\r\n                         <div key={index}>\r\n-                          {Object.entries(buffObject).map(([buffName, buffValue], idx) => (\r\n-                            <div key={idx}>\r\n-                              <strong>{buffName}:</strong> {buffValue}\r\n-                            </div>\r\n-                          ))}\r\n+                          {Object.entries(buffObject).map(\r\n+                            ([buffName, buffValue], idx) => (\r\n+                              <div key={idx}>\r\n+                                <strong>{buffName}:</strong> {buffValue}\r\n+                              </div>\r\n+                            )\r\n+                          )}\r\n                         </div>\r\n                       ))}\r\n                     </div>\r\n+                    </p>\r\n                   </div>\r\n                 )}\r\n                 <div className={styles.btn}>\r\n                   <div className={styles.left}>\r\n"
                },
                {
                    "date": 1723877107714,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,15 +11,14 @@\n   _id: string;\r\n   photo: string[];\r\n   skintype: string;\r\n   quantity: any;\r\n-  castles: string[]; // Changed to string[] for better type definition\r\n-  buff?: { [key: string]: any }[]; // Changed to an array of objects with string keys\r\n+  castles: string[];\r\n+  buff?: { [key: string]: any }[];\r\n   customerName?: string;\r\n   quantitySold?: number;\r\n }\r\n \r\n-// Function to transform text to \"Title Case\" format\r\n const toTitleCase = (text: string) => {\r\n   return text\r\n     .toLowerCase()\r\n     .split(\" \")\r\n@@ -32,8 +31,9 @@\n   const [showModal, setShowModal] = useState<boolean>(false);\r\n   const [showSell, setShowSell] = useState<boolean>(false);\r\n   const [currentCastle, setCurrentCastle] = useState<Castle | null>(null);\r\n   const [allow, setAllow] = useState(false);\r\n+  const [openDropdown, setOpenDropdown] = useState<string | null>(null); // Track which dropdown is open\r\n \r\n   useEffect(() => {\r\n     const admin = localStorage.getItem(\"role\");\r\n     if (admin === \"admin\") {\r\n@@ -149,8 +149,12 @@\n       console.error(\"Error updating data:\", error);\r\n     }\r\n   };\r\n \r\n+  const toggleDropdown = (id: string) => {\r\n+    setOpenDropdown(openDropdown === id ? null : id); // Toggle dropdown visibility\r\n+  };\r\n+\r\n   return (\r\n     <>\r\n       <div style={{ display: \"flex\" }}>\r\n         <div className={styles.cardContainer}>\r\n@@ -174,10 +178,20 @@\n                     </p>\r\n                     <p className={styles.cardText}>\r\n                       <strong>Castles:</strong>\r\n                       <div className={styles.dropdown}>\r\n-                        <button className={styles.dropbtn}>Show Castles</button>\r\n-                        <div className={styles.dropdownContent}>\r\n+                        <button\r\n+                          className={styles.dropbtn}\r\n+                          onClick={() => toggleDropdown(`castles-${castle._id}`)}\r\n+                        >\r\n+                          Show Castles\r\n+                          <span className={styles.arrowDown}></span>\r\n+                        </button>\r\n+                        <div\r\n+                          className={`${styles.dropdownContent} ${\r\n+                            openDropdown === `castles-${castle._id}` ? styles.show : \"\"\r\n+                          }`}\r\n+                        >\r\n                           {castle.castles.map((castleName, index) => (\r\n                             <a key={index} href=\"#\">\r\n                               {castleName}\r\n                             </a>\r\n@@ -187,30 +201,37 @@\n                     </p>\r\n                   </>\r\n                 )}\r\n                 {castle.buff && castle.buff.length > 0 && (\r\n-                  <div className={styles.dropdown}>\r\n-                    {\" \"}\r\n-                    <p className={styles.cardText}>\r\n-                      {\" \"}\r\n-                      <strong>Castles:</strong>\r\n-                 \r\n-                    <button className={styles.dropbtn}>Show Buffs</button>\r\n-                    <div className={styles.dropdownContent}>\r\n-                      {castle.buff.map((buffObject, index) => (\r\n-                        <div key={index}>\r\n-                          {Object.entries(buffObject).map(\r\n-                            ([buffName, buffValue], idx) => (\r\n-                              <div key={idx}>\r\n-                                <strong>{buffName}:</strong> {buffValue}\r\n-                              </div>\r\n-                            )\r\n-                          )}\r\n-                        </div>\r\n-                      ))}\r\n+                  <p className={styles.cardText}>\r\n+                    <strong>Buff:</strong>\r\n+                    <div className={styles.dropdown}>\r\n+                      <button\r\n+                        className={styles.dropbtn}\r\n+                        onClick={() => toggleDropdown(`buffs-${castle._id}`)}\r\n+                      >\r\n+                        Show Buffs\r\n+                        <span className={styles.arrowDown}></span>\r\n+                      </button>\r\n+                      <div\r\n+                        className={`${styles.dropdownContent} ${\r\n+                          openDropdown === `buffs-${castle._id}` ? styles.show : \"\"\r\n+                        }`}\r\n+                      >\r\n+                        {castle.buff.map((buffObject, index) => (\r\n+                          <div key={index}>\r\n+                            {Object.entries(buffObject).map(\r\n+                              ([buffName, buffValue], idx) => (\r\n+                                <div key={idx}>\r\n+                                  <strong>{buffName}:</strong> {buffValue}\r\n+                                </div>\r\n+                              )\r\n+                            )}\r\n+                          </div>\r\n+                        ))}\r\n+                      </div>\r\n                     </div>\r\n-                    </p>\r\n-                  </div>\r\n+                  </p>\r\n                 )}\r\n                 <div className={styles.btn}>\r\n                   <div className={styles.left}>\r\n                     {allow && (\r\n"
                },
                {
                    "date": 1723877516300,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -153,8 +153,13 @@\n   const toggleDropdown = (id: string) => {\r\n     setOpenDropdown(openDropdown === id ? null : id); // Toggle dropdown visibility\r\n   };\r\n \r\n+  const handleDropdownClick = (id: string, e: React.MouseEvent) => {\r\n+    e.stopPropagation(); // Prevent click event from propagating to parent elements\r\n+    toggleDropdown(id);\r\n+  };\r\n+\r\n   return (\r\n     <>\r\n       <div style={{ display: \"flex\" }}>\r\n         <div className={styles.cardContainer}>\r\n@@ -180,11 +185,11 @@\n                       <strong>Castles:</strong>\r\n                       <div className={styles.dropdown}>\r\n                         <button\r\n                           className={styles.dropbtn}\r\n-                          onClick={() => toggleDropdown(`castles-${castle._id}`)}\r\n+                          onClick={(e) => handleDropdownClick(`castles-${castle._id}`, e)}\r\n                         >\r\n-                          Show Castles\r\n+                          {openDropdown === `castles-${castle._id}` ? \"Hide Castles\" : \"Show Castles\"}\r\n                           <span className={styles.arrowDown}></span>\r\n                         </button>\r\n                         <div\r\n                           className={`${styles.dropdownContent} ${\r\n@@ -206,11 +211,11 @@\n                     <strong>Buff:</strong>\r\n                     <div className={styles.dropdown}>\r\n                       <button\r\n                         className={styles.dropbtn}\r\n-                        onClick={() => toggleDropdown(`buffs-${castle._id}`)}\r\n+                        onClick={(e) => handleDropdownClick(`buffs-${castle._id}`, e)}\r\n                       >\r\n-                        Show Buffs\r\n+                        {openDropdown === `buffs-${castle._id}` ? \"Hide Buffs\" : \"Show Buffs\"}\r\n                         <span className={styles.arrowDown}></span>\r\n                       </button>\r\n                       <div\r\n                         className={`${styles.dropdownContent} ${\r\n"
                },
                {
                    "date": 1723877634342,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -205,38 +205,23 @@\n                       </div>\r\n                     </p>\r\n                   </>\r\n                 )}\r\n-                {castle.buff && castle.buff.length > 0 && (\r\n-                  <p className={styles.cardText}>\r\n-                    <strong>Buff:</strong>\r\n-                    <div className={styles.dropdown}>\r\n-                      <button\r\n-                        className={styles.dropbtn}\r\n-                        onClick={(e) => handleDropdownClick(`buffs-${castle._id}`, e)}\r\n-                      >\r\n-                        {openDropdown === `buffs-${castle._id}` ? \"Hide Buffs\" : \"Show Buffs\"}\r\n-                        <span className={styles.arrowDown}></span>\r\n-                      </button>\r\n-                      <div\r\n-                        className={`${styles.dropdownContent} ${\r\n-                          openDropdown === `buffs-${castle._id}` ? styles.show : \"\"\r\n-                        }`}\r\n-                      >\r\n-                        {castle.buff.map((buffObject, index) => (\r\n-                          <div key={index}>\r\n-                            {Object.entries(buffObject).map(\r\n-                              ([buffName, buffValue], idx) => (\r\n-                                <div key={idx}>\r\n-                                  <strong>{buffName}:</strong> {buffValue}\r\n-                                </div>\r\n-                              )\r\n-                            )}\r\n-                          </div>\r\n-                        ))}\r\n-                      </div>\r\n+              {castle.buff && castle.buff.length > 0 && (\r\n+                  <div className={styles.dropdown}>   <strong>Castles:</strong>\r\n+                    <button className={styles.dropbtn}>Show Buffs</button>\r\n+                    <div className={styles.dropdownContent}>\r\n+                      {castle.buff.map((buffObject, index) => (\r\n+                        <div key={index}>\r\n+                          {Object.entries(buffObject).map(([buffName, buffValue], idx) => (\r\n+                            <div key={idx}>\r\n+                              <strong>{buffName}:</strong> {buffValue}\r\n+                            </div>\r\n+                          ))}\r\n+                        </div>\r\n+                      ))}\r\n                     </div>\r\n-                  </p>\r\n+                  </div>\r\n                 )}\r\n                 <div className={styles.btn}>\r\n                   <div className={styles.left}>\r\n                     {allow && (\r\n"
                },
                {
                    "date": 1723877641366,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -205,23 +205,38 @@\n                       </div>\r\n                     </p>\r\n                   </>\r\n                 )}\r\n-              {castle.buff && castle.buff.length > 0 && (\r\n-                  <div className={styles.dropdown}>   <strong>Castles:</strong>\r\n-                    <button className={styles.dropbtn}>Show Buffs</button>\r\n-                    <div className={styles.dropdownContent}>\r\n-                      {castle.buff.map((buffObject, index) => (\r\n-                        <div key={index}>\r\n-                          {Object.entries(buffObject).map(([buffName, buffValue], idx) => (\r\n-                            <div key={idx}>\r\n-                              <strong>{buffName}:</strong> {buffValue}\r\n-                            </div>\r\n-                          ))}\r\n-                        </div>\r\n-                      ))}\r\n+                {castle.buff && castle.buff.length > 0 && (\r\n+                  <p className={styles.cardText}>\r\n+                    <strong>Buff:</strong>\r\n+                    <div className={styles.dropdown}>\r\n+                      <button\r\n+                        className={styles.dropbtn}\r\n+                        onClick={(e) => handleDropdownClick(`buffs-${castle._id}`, e)}\r\n+                      >\r\n+                        {openDropdown === `buffs-${castle._id}` ? \"Hide Buffs\" : \"Show Buffs\"}\r\n+                        <span className={styles.arrowDown}></span>\r\n+                      </button>\r\n+                      <div\r\n+                        className={`${styles.dropdownContent} ${\r\n+                          openDropdown === `buffs-${castle._id}` ? styles.show : \"\"\r\n+                        }`}\r\n+                      >\r\n+                        {castle.buff.map((buffObject, index) => (\r\n+                          <div key={index}>\r\n+                            {Object.entries(buffObject).map(\r\n+                              ([buffName, buffValue], idx) => (\r\n+                                <div key={idx}>\r\n+                                  <strong>{buffName}:</strong> {buffValue}\r\n+                                </div>\r\n+                              )\r\n+                            )}\r\n+                          </div>\r\n+                        ))}\r\n+                      </div>\r\n                     </div>\r\n-                  </div>\r\n+                  </p>\r\n                 )}\r\n                 <div className={styles.btn}>\r\n                   <div className={styles.left}>\r\n                     {allow && (\r\n"
                },
                {
                    "date": 1723877654311,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,14 +11,15 @@\n   _id: string;\r\n   photo: string[];\r\n   skintype: string;\r\n   quantity: any;\r\n-  castles: string[];\r\n-  buff?: { [key: string]: any }[];\r\n+  castles: any;\r\n+  buff?: any;\r\n   customerName?: string;\r\n   quantitySold?: number;\r\n }\r\n \r\n+// Function to transform text to \"Title Case\" format\r\n const toTitleCase = (text: string) => {\r\n   return text\r\n     .toLowerCase()\r\n     .split(\" \")\r\n@@ -31,17 +32,16 @@\n   const [showModal, setShowModal] = useState<boolean>(false);\r\n   const [showSell, setShowSell] = useState<boolean>(false);\r\n   const [currentCastle, setCurrentCastle] = useState<Castle | null>(null);\r\n   const [allow, setAllow] = useState(false);\r\n-  const [openDropdown, setOpenDropdown] = useState<string | null>(null); // Track which dropdown is open\r\n \r\n   useEffect(() => {\r\n     const admin = localStorage.getItem(\"role\");\r\n     if (admin === \"admin\") {\r\n       setAllow(true);\r\n     }\r\n   }, []);\r\n-\r\n+  \r\n   const router = useRouter();\r\n   const { Skintypes } = router.query;\r\n \r\n   useEffect(() => {\r\n@@ -149,109 +149,65 @@\n       console.error(\"Error updating data:\", error);\r\n     }\r\n   };\r\n \r\n-  const toggleDropdown = (id: string) => {\r\n-    setOpenDropdown(openDropdown === id ? null : id); // Toggle dropdown visibility\r\n-  };\r\n-\r\n-  const handleDropdownClick = (id: string, e: React.MouseEvent) => {\r\n-    e.stopPropagation(); // Prevent click event from propagating to parent elements\r\n-    toggleDropdown(id);\r\n-  };\r\n-\r\n   return (\r\n     <>\r\n       <div style={{ display: \"flex\" }}>\r\n         <div className={styles.cardContainer}>\r\n           {castlesData.map((castle) => (\r\n-            <div key={castle._id} className={styles.card}>\r\n-              <Image\r\n-                src={castle.photo[0]}\r\n-                alt={castle.skintype || \"Castle Image\"}\r\n-                className={styles.cardImage}\r\n-                width={500}\r\n-                height={300}\r\n-              />\r\n-              <div className={styles.cardContent}>\r\n-                <h2 className={styles.cardTitle}>\r\n-                  {toTitleCase(castle.skintype)}\r\n-                </h2>\r\n-                {allow && (\r\n-                  <>\r\n+            <Link key={castle._id} href={\"https://wa.me/919599728762\"} style={{ textDecoration: \"none\" }}>\r\n+              <div key={castle._id} className={styles.card}>\r\n+                <Image\r\n+                  src={castle.photo[0]}\r\n+                  alt={castle.skintype || \"Castle Image\"}\r\n+                  className={styles.cardImage}\r\n+                  width={500}\r\n+                  height={300}\r\n+                />\r\n+                <div className={styles.cardContent}>\r\n+                  <h2 className={styles.cardTitle}>\r\n+                    {toTitleCase(castle.skintype)}\r\n+                  </h2>\r\n+                  {allow && ( <p className={styles.cardText}>\r\n+                    <strong>Quantity:</strong> {castle.quantity}\r\n+                  </p>\r\n+                     )}\r\n+                  {allow && ( <p className={styles.cardText}>\r\n+                    <strong>Castles:</strong>  {castle.castles.join(\", \")}\r\n+                  </p>\r\n+                    )}\r\n+                  {castle.buff && castle.buff.length > 0 && (\r\n                     <p className={styles.cardText}>\r\n-                      <strong>Quantity:</strong> {castle.quantity}\r\n-                    </p>\r\n-                    <p className={styles.cardText}>\r\n-                      <strong>Castles:</strong>\r\n-                      <div className={styles.dropdown}>\r\n-                        <button\r\n-                          className={styles.dropbtn}\r\n-                          onClick={(e) => handleDropdownClick(`castles-${castle._id}`, e)}\r\n-                        >\r\n-                          {openDropdown === `castles-${castle._id}` ? \"Hide Castles\" : \"Show Castles\"}\r\n-                          <span className={styles.arrowDown}></span>\r\n-                        </button>\r\n-                        <div\r\n-                          className={`${styles.dropdownContent} ${\r\n-                            openDropdown === `castles-${castle._id}` ? styles.show : \"\"\r\n-                          }`}\r\n-                        >\r\n-                          {castle.castles.map((castleName, index) => (\r\n-                            <a key={index} href=\"#\">\r\n-                              {castleName}\r\n-                            </a>\r\n-                          ))}\r\n+                      <strong>Buff:</strong>\r\n+                      {castle.buff.map((buffObject: any, index: number) => (\r\n+                        <div key={index}>\r\n+                          {Object.entries(buffObject).map(\r\n+                            ([buffName, buffValue]: any, idx: number) => (\r\n+                              <div key={idx}>\r\n+                                <strong>{buffName}:</strong> {buffValue}%\r\n+                              </div>\r\n+                            )\r\n+                          )}\r\n                         </div>\r\n-                      </div>\r\n+                      ))}\r\n                     </p>\r\n-                  </>\r\n-                )}\r\n-                {castle.buff && castle.buff.length > 0 && (\r\n-                  <p className={styles.cardText}>\r\n-                    <strong>Buff:</strong>\r\n-                    <div className={styles.dropdown}>\r\n-                      <button\r\n-                        className={styles.dropbtn}\r\n-                        onClick={(e) => handleDropdownClick(`buffs-${castle._id}`, e)}\r\n-                      >\r\n-                        {openDropdown === `buffs-${castle._id}` ? \"Hide Buffs\" : \"Show Buffs\"}\r\n-                        <span className={styles.arrowDown}></span>\r\n-                      </button>\r\n-                      <div\r\n-                        className={`${styles.dropdownContent} ${\r\n-                          openDropdown === `buffs-${castle._id}` ? styles.show : \"\"\r\n-                        }`}\r\n-                      >\r\n-                        {castle.buff.map((buffObject, index) => (\r\n-                          <div key={index}>\r\n-                            {Object.entries(buffObject).map(\r\n-                              ([buffName, buffValue], idx) => (\r\n-                                <div key={idx}>\r\n-                                  <strong>{buffName}:</strong> {buffValue}\r\n-                                </div>\r\n-                              )\r\n-                            )}\r\n-                          </div>\r\n-                        ))}\r\n-                      </div>\r\n+                  )}\r\n+                  <div className={styles.btn}>\r\n+                    <div className={styles.left}>\r\n+                      {allow && (\r\n+                        <button onClick={() => handleEdit(castle)}>Edit</button>\r\n+                      )}\r\n                     </div>\r\n-                  </p>\r\n-                )}\r\n-                <div className={styles.btn}>\r\n-                  <div className={styles.left}>\r\n-                    {allow && (\r\n-                      <button onClick={() => handleEdit(castle)}>Edit</button>\r\n-                    )}\r\n+                    <div>\r\n+                      {allow && (\r\n+                        <button onClick={() => handleSell(castle)}>Sell</button>\r\n+                      )}\r\n+                    </div>\r\n                   </div>\r\n-                  <div>\r\n-                    {allow && (\r\n-                      <button onClick={() => handleSell(castle)}>Sell</button>\r\n-                    )}\r\n-                  </div>\r\n                 </div>\r\n               </div>\r\n-            </div>\r\n+            </Link>\r\n           ))}\r\n         </div>\r\n       </div>\r\n       <Modal\r\n"
                },
                {
                    "date": 1723877775457,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -167,8 +167,11 @@\n                 <div className={styles.cardContent}>\r\n                   <h2 className={styles.cardTitle}>\r\n                     {toTitleCase(castle.skintype)}\r\n                   </h2>\r\n+                  <h2 className={styles.cardTitle}>\r\n+                    {toTitleCase(castle.sellingAmount)}\r\n+                  </h2>\r\n                   {allow && ( <p className={styles.cardText}>\r\n                     <strong>Quantity:</strong> {castle.quantity}\r\n                   </p>\r\n                      )}\r\n"
                },
                {
                    "date": 1723877830072,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -168,9 +168,9 @@\n                   <h2 className={styles.cardTitle}>\r\n                     {toTitleCase(castle.skintype)}\r\n                   </h2>\r\n                   <h2 className={styles.cardTitle}>\r\n-                    {toTitleCase(castle.sellingAmount)}\r\n+                    {castle.sellingAmount}\r\n                   </h2>\r\n                   {allow && ( <p className={styles.cardText}>\r\n                     <strong>Quantity:</strong> {castle.quantity}\r\n                   </p>\r\n"
                },
                {
                    "date": 1723877874842,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,8 +51,9 @@\n           const response = await axios.get(\r\n             `https://www.referback.trollsufficient.com/data/permalink/${Skintypes}`\r\n           );\r\n           setCastlesData(response.data);\r\n+          console.log(castlesData)\r\n         }\r\n       } catch (error) {\r\n         console.error(\"Error fetching data:\", error);\r\n       }\r\n"
                },
                {
                    "date": 1723877888719,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,9 +51,9 @@\n           const response = await axios.get(\r\n             `https://www.referback.trollsufficient.com/data/permalink/${Skintypes}`\r\n           );\r\n           setCastlesData(response.data);\r\n-          console.log(castlesData)\r\n+          // console.log(castlesData)\r\n         }\r\n       } catch (error) {\r\n         console.error(\"Error fetching data:\", error);\r\n       }\r\n"
                },
                {
                    "date": 1723877899506,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -169,9 +169,9 @@\n                   <h2 className={styles.cardTitle}>\r\n                     {toTitleCase(castle.skintype)}\r\n                   </h2>\r\n                   <h2 className={styles.cardTitle}>\r\n-                    {castle.sellingAmount}\r\n+                    Selling Amount: {castle.sellingAmount}\r\n                   </h2>\r\n                   {allow && ( <p className={styles.cardText}>\r\n                     <strong>Quantity:</strong> {castle.quantity}\r\n                   </p>\r\n"
                },
                {
                    "date": 1723877951488,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -168,9 +168,9 @@\n                 <div className={styles.cardContent}>\r\n                   <h2 className={styles.cardTitle}>\r\n                     {toTitleCase(castle.skintype)}\r\n                   </h2>\r\n-                  <h2 className={styles.cardTitle}>\r\n+                  <h2 className={styles.cardTitle1}>\r\n                     Selling Amount: {castle.sellingAmount}\r\n                   </h2>\r\n                   {allow && ( <p className={styles.cardText}>\r\n                     <strong>Quantity:</strong> {castle.quantity}\r\n"
                },
                {
                    "date": 1723878040963,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,16 +32,17 @@\n   const [showModal, setShowModal] = useState<boolean>(false);\r\n   const [showSell, setShowSell] = useState<boolean>(false);\r\n   const [currentCastle, setCurrentCastle] = useState<Castle | null>(null);\r\n   const [allow, setAllow] = useState(false);\r\n+  const [activeDropdown, setActiveDropdown] = useState<string | null>(null); // Track active dropdown\r\n \r\n   useEffect(() => {\r\n     const admin = localStorage.getItem(\"role\");\r\n     if (admin === \"admin\") {\r\n       setAllow(true);\r\n     }\r\n   }, []);\r\n-  \r\n+\r\n   const router = useRouter();\r\n   const { Skintypes } = router.query;\r\n \r\n   useEffect(() => {\r\n@@ -51,9 +52,8 @@\n           const response = await axios.get(\r\n             `https://www.referback.trollsufficient.com/data/permalink/${Skintypes}`\r\n           );\r\n           setCastlesData(response.data);\r\n-          // console.log(castlesData)\r\n         }\r\n       } catch (error) {\r\n         console.error(\"Error fetching data:\", error);\r\n       }\r\n@@ -150,8 +150,12 @@\n       console.error(\"Error updating data:\", error);\r\n     }\r\n   };\r\n \r\n+  const handleDropdownToggle = (id: string) => {\r\n+    setActiveDropdown(activeDropdown === id ? null : id);\r\n+  };\r\n+\r\n   return (\r\n     <>\r\n       <div style={{ display: \"flex\" }}>\r\n         <div className={styles.cardContainer}>\r\n@@ -171,65 +175,35 @@\n                   </h2>\r\n                   <h2 className={styles.cardTitle1}>\r\n                     Selling Amount: {castle.sellingAmount}\r\n                   </h2>\r\n-                  {allow && ( <p className={styles.cardText}>\r\n-                    <strong>Quantity:</strong> {castle.quantity}\r\n-                  </p>\r\n-                     )}\r\n-                  {allow && ( <p className={styles.cardText}>\r\n-                    <strong>Castles:</strong>  {castle.castles.join(\", \")}\r\n-                  </p>\r\n-                    )}\r\n-                  {castle.buff && castle.buff.length > 0 && (\r\n+                  {allow && (\r\n                     <p className={styles.cardText}>\r\n-                      <strong>Buff:</strong>\r\n-                      {castle.buff.map((buffObject: any, index: number) => (\r\n-                        <div key={index}>\r\n-                          {Object.entries(buffObject).map(\r\n-                            ([buffName, buffValue]: any, idx: number) => (\r\n-                              <div key={idx}>\r\n-                                <strong>{buffName}:</strong> {buffValue}%\r\n-                              </div>\r\n-                            )\r\n-                          )}\r\n-                        </div>\r\n-                      ))}\r\n+                      <strong>Quantity:</strong> {castle.quantity}\r\n                     </p>\r\n                   )}\r\n-                  <div className={styles.btn}>\r\n-                    <div className={styles.left}>\r\n-                      {allow && (\r\n-                        <button onClick={() => handleEdit(castle)}>Edit</button>\r\n-                      )}\r\n+                  {allow && (\r\n+                    <div className={styles.dropdown}>\r\n+                      <button\r\n+                        className={styles.dropbtn}\r\n+                        onClick={(e) => {\r\n+                          e.stopPropagation();\r\n+                          handleDropdownToggle(castle._id);\r\n+                        }}\r\n+                      >\r\n+                        Castles\r\n+                        <span className={styles.arrowDown}></span>\r\n+                      </button>\r\n+                      <div\r\n+                        className={`${styles.dropdownContent} ${\r\n+                          activeDropdown === castle._id ? styles.show : \"\"\r\n+                        }`}\r\n+                      >\r\n+                        {castle.castles.map((castleName: string, index: number) => (\r\n+                          <a key={index} href=\"#\">\r\n+                            {castleName}\r\n+                          </a>\r\n+                        ))}\r\n+                      </div>\r\n                     </div>\r\n-                    <div>\r\n-                      {allow && (\r\n-                        <button onClick={() => handleSell(castle)}>Sell</button>\r\n-                      )}\r\n-                    </div>\r\n-                  </div>\r\n-                </div>\r\n-              </div>\r\n-            </Link>\r\n-          ))}\r\n-        </div>\r\n-      </div>\r\n-      <Modal\r\n-        show={showModal}\r\n-        onClose={() => setShowModal(false)}\r\n-        castle={currentCastle}\r\n-        handleInputChange={handleInputChange}\r\n-        handleSave={handleSave}\r\n-      />\r\n-      <Sell\r\n-        show={showSell}\r\n-        onClose={() => setShowSell(false)}\r\n-        castle={currentCastle}\r\n-        handleInputChange={handleInputChange}\r\n-        handleSave={handleSellSave}\r\n-      />\r\n-    </>\r\n-  );\r\n-};\r\n-\r\n-export default Index;\r\n+                  )}\r\n+                  {castle\r\n"
                },
                {
                    "date": 1723878055672,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -205,5 +205,57 @@\n                         ))}\r\n                       </div>\r\n                     </div>\r\n                   )}\r\n-                  {castle\r\n+                  {castle.buff && castle.buff.length > 0 && (\r\n+                    <p className={styles.cardText}>\r\n+                      <strong>Buff:</strong>\r\n+                      {castle.buff.map((buffObject: any, index: number) => (\r\n+                        <div key={index}>\r\n+                          {Object.entries(buffObject).map(\r\n+                            ([buffName, buffValue]: any, idx: number) => (\r\n+                              <div key={idx}>\r\n+                                <strong>{buffName}:</strong> {buffValue}%\r\n+                              </div>\r\n+                            )\r\n+                          )}\r\n+                        </div>\r\n+                      ))}\r\n+                    </p>\r\n+                  )}\r\n+                  <div className={styles.btn}>\r\n+                    <div className={styles.left}>\r\n+                      {allow && (\r\n+                        <button onClick={() => handleEdit(castle)}>Edit</button>\r\n+                      )}\r\n+                    </div>\r\n+                    <div>\r\n+                      {allow && (\r\n+                        <button onClick={() => handleSell(castle)}>Sell</button>\r\n+                      )}\r\n+                    </div>\r\n+                  </div>\r\n+                </div>\r\n+              </div>\r\n+            </Link>\r\n+          ))}\r\n+        </div>\r\n+      </div>\r\n+      <Modal\r\n+        show={showModal}\r\n+        onClose={() => setShowModal(false)}\r\n+        castle={currentCastle}\r\n+        handleInputChange={handleInputChange}\r\n+        handleSave={handleSave}\r\n+      />\r\n+      <Sell\r\n+        show={showSell}\r\n+        onClose={() => setShowSell(false)}\r\n+        castle={currentCastle}\r\n+        handleInputChange={handleInputChange}\r\n+        handleSave={handleSellSave}\r\n+      />\r\n+    </>\r\n+  );\r\n+};\r\n+\r\n+export default Index;\r\n"
                },
                {
                    "date": 1723878105281,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,8 +14,9 @@\n   quantity: any;\r\n   castles: any;\r\n   buff?: any;\r\n   customerName?: string;\r\n+  sellingAmount?:any;\r\n   quantitySold?: number;\r\n }\r\n \r\n // Function to transform text to \"Title Case\" format\r\n"
                },
                {
                    "date": 1723878122341,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -183,8 +183,9 @@\n                     </p>\r\n                   )}\r\n                   {allow && (\r\n                     <div className={styles.dropdown}>\r\n+                      Castles\r\n                       <button\r\n                         className={styles.dropbtn}\r\n                         onClick={(e) => {\r\n                           e.stopPropagation();\r\n"
                },
                {
                    "date": 1723878166255,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -181,9 +181,9 @@\n                     <p className={styles.cardText}>\r\n                       <strong>Quantity:</strong> {castle.quantity}\r\n                     </p>\r\n                   )}\r\n-                  {allow && (\r\n+                  {allow && (<div style={{display:\"flex\"}}>\r\n                     <div className={styles.dropdown}>\r\n                       Castles\r\n                       <button\r\n                         className={styles.dropbtn}\r\n@@ -206,8 +206,9 @@\n                           </a>\r\n                         ))}\r\n                       </div>\r\n                     </div>\r\n+                    </div>\r\n                   )}\r\n                   {castle.buff && castle.buff.length > 0 && (\r\n                     <p className={styles.cardText}>\r\n                       <strong>Buff:</strong>\r\n"
                },
                {
                    "date": 1723878198172,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -183,9 +183,11 @@\n                     </p>\r\n                   )}\r\n                   {allow && (<div style={{display:\"flex\"}}>\r\n                     <div className={styles.dropdown}>\r\n-                      Castles\r\n+                    <p className={styles.cardText}>\r\n+                    <strong>Buff:</strong>\r\n+                    |</p>\r\n                       <button\r\n                         className={styles.dropbtn}\r\n                         onClick={(e) => {\r\n                           e.stopPropagation();\r\n"
                },
                {
                    "date": 1723878212318,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -184,10 +184,10 @@\n                   )}\r\n                   {allow && (<div style={{display:\"flex\"}}>\r\n                     <div className={styles.dropdown}>\r\n                     <p className={styles.cardText}>\r\n-                    <strong>Buff:</strong>\r\n-                    |</p>\r\n+                    <strong>Castles</strong>\r\n+                    </p>\r\n                       <button\r\n                         className={styles.dropbtn}\r\n                         onClick={(e) => {\r\n                           e.stopPropagation();\r\n"
                },
                {
                    "date": 1723878334543,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,9 @@\n   quantity: any;\r\n   castles: any;\r\n   buff?: any;\r\n   customerName?: string;\r\n-  sellingAmount?:any;\r\n+  sellingAmount?: any;\r\n   quantitySold?: number;\r\n }\r\n \r\n // Function to transform text to \"Title Case\" format\r\n@@ -181,36 +181,37 @@\n                     <p className={styles.cardText}>\r\n                       <strong>Quantity:</strong> {castle.quantity}\r\n                     </p>\r\n                   )}\r\n-                  {allow && (<div style={{display:\"flex\"}}>\r\n-                    <div className={styles.dropdown}>\r\n-                    <p className={styles.cardText}>\r\n-                    <strong>Castles</strong>\r\n-                    </p>\r\n-                      <button\r\n-                        className={styles.dropbtn}\r\n-                        onClick={(e) => {\r\n-                          e.stopPropagation();\r\n-                          handleDropdownToggle(castle._id);\r\n-                        }}\r\n-                      >\r\n-                        Castles\r\n-                        <span className={styles.arrowDown}></span>\r\n-                      </button>\r\n-                      <div\r\n-                        className={`${styles.dropdownContent} ${\r\n-                          activeDropdown === castle._id ? styles.show : \"\"\r\n-                        }`}\r\n-                      >\r\n-                        {castle.castles.map((castleName: string, index: number) => (\r\n-                          <a key={index} href=\"#\">\r\n-                            {castleName}\r\n-                          </a>\r\n-                        ))}\r\n+                  {allow && (\r\n+                    <div className={styles.dropdownContainer}>\r\n+                      <p className={styles.cardText}>\r\n+                        <strong>Castles</strong>\r\n+                      </p>\r\n+                      <div className={styles.dropdown}>\r\n+                        <button\r\n+                          className={styles.dropbtn}\r\n+                          onClick={(e) => {\r\n+                            e.stopPropagation();\r\n+                            handleDropdownToggle(castle._id);\r\n+                          }}\r\n+                        >\r\n+                          Castles\r\n+                          <span className={styles.arrowDown}></span>\r\n+                        </button>\r\n+                        <div\r\n+                          className={`${styles.dropdownContent} ${\r\n+                            activeDropdown === castle._id ? styles.show : \"\"\r\n+                          }`}\r\n+                        >\r\n+                          {castle.castles.map((castleName: string, index: number) => (\r\n+                            <a key={index} href=\"#\">\r\n+                              {castleName}\r\n+                            </a>\r\n+                          ))}\r\n+                        </div>\r\n                       </div>\r\n                     </div>\r\n-                    </div>\r\n                   )}\r\n                   {castle.buff && castle.buff.length > 0 && (\r\n                     <p className={styles.cardText}>\r\n                       <strong>Buff:</strong>\r\n"
                },
                {
                    "date": 1723878395478,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -160,17 +160,19 @@\n     <>\r\n       <div style={{ display: \"flex\" }}>\r\n         <div className={styles.cardContainer}>\r\n           {castlesData.map((castle) => (\r\n-            <Link key={castle._id} href={\"https://wa.me/919599728762\"} style={{ textDecoration: \"none\" }}>\r\n+            \r\n               <div key={castle._id} className={styles.card}>\r\n+                <Link key={castle._id} href={\"https://wa.me/919599728762\"} style={{ textDecoration: \"none\" }}>\r\n                 <Image\r\n                   src={castle.photo[0]}\r\n                   alt={castle.skintype || \"Castle Image\"}\r\n                   className={styles.cardImage}\r\n                   width={500}\r\n                   height={300}\r\n                 />\r\n+                </Link>\r\n                 <div className={styles.cardContent}>\r\n                   <h2 className={styles.cardTitle}>\r\n                     {toTitleCase(castle.skintype)}\r\n                   </h2>\r\n@@ -241,9 +243,9 @@\n                     </div>\r\n                   </div>\r\n                 </div>\r\n               </div>\r\n-            </Link>\r\n+        \r\n           ))}\r\n         </div>\r\n       </div>\r\n       <Modal\r\n"
                },
                {
                    "date": 1723878424128,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -186,9 +186,9 @@\n                   )}\r\n                   {allow && (\r\n                     <div className={styles.dropdownContainer}>\r\n                       <p className={styles.cardText}>\r\n-                        <strong>Castles</strong>\r\n+                        {/* <strong>Castles</strong> */}\r\n                       </p>\r\n                       <div className={styles.dropdown}>\r\n                         <button\r\n                           className={styles.dropbtn}\r\n"
                },
                {
                    "date": 1723958067751,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -105,13 +105,14 @@\n     }\r\n   };\r\n \r\n   const handleSellSave = async () => {\r\n-    if (!currentCastle) return;\r\n-\r\n+    if (!currentCastle || !currentCastle.skintype) return;\r\n+  \r\n     try {\r\n       const token = localStorage.getItem(\"accessToken\");\r\n-\r\n+  \r\n+      // Post request to update customer details\r\n       await axios.post(\r\n         \"https://www.referback.trollsufficient.com/customer/details\",\r\n         {\r\n           name: currentCastle.customerName,\r\n@@ -123,15 +124,15 @@\n             Authorization: `Bearer ${token}`,\r\n           },\r\n         }\r\n       );\r\n-\r\n+  \r\n+      // Update the castle quantity\r\n       const updatedCastle = {\r\n         ...currentCastle,\r\n-        quantity:\r\n-          Number(currentCastle.quantity) - Number(currentCastle.quantitySold),\r\n+        quantity: Number(currentCastle.quantity) - Number(currentCastle.quantitySold),\r\n       };\r\n-\r\n+  \r\n       await axios.put(\r\n         `https://www.referback.trollsufficient.com/data/castles/${currentCastle._id}`,\r\n         updatedCastle,\r\n         {\r\n@@ -139,9 +140,22 @@\n             Authorization: `Bearer ${token}`,\r\n           },\r\n         }\r\n       );\r\n-\r\n+  \r\n+      // Remove the selected castle from the list\r\n+      await axios.post(\r\n+        `http://localhost:3000/data/castles/${currentCastle._id}/removeCastle`,\r\n+        {\r\n+          castleName: selectedCastle\r\n+        },\r\n+        {\r\n+          headers: {\r\n+            Authorization: `Bearer ${token}`,\r\n+          },\r\n+        }\r\n+      );\r\n+  \r\n       setCastlesData((prev) =>\r\n         prev.map((castle) =>\r\n           castle._id === currentCastle._id ? updatedCastle : castle\r\n         )\r\n@@ -150,8 +164,9 @@\n     } catch (error) {\r\n       console.error(\"Error updating data:\", error);\r\n     }\r\n   };\r\n+  \r\n \r\n   const handleDropdownToggle = (id: string) => {\r\n     setActiveDropdown(activeDropdown === id ? null : id);\r\n   };\r\n"
                },
                {
                    "date": 1723958126788,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,9 +33,10 @@\n   const [showModal, setShowModal] = useState<boolean>(false);\r\n   const [showSell, setShowSell] = useState<boolean>(false);\r\n   const [currentCastle, setCurrentCastle] = useState<Castle | null>(null);\r\n   const [allow, setAllow] = useState(false);\r\n-  const [activeDropdown, setActiveDropdown] = useState<string | null>(null); // Track active dropdown\r\n+  const [activeDropdown, setActiveDropdown] = useState<string | null>(null);\r\n+  const [selectedCastle, setSelectedCastle] = useState<string | null>(null); // Added state\r\n \r\n   useEffect(() => {\r\n     const admin = localStorage.getItem(\"role\");\r\n     if (admin === \"admin\") {\r\n@@ -69,8 +70,9 @@\n   };\r\n \r\n   const handleSell = (castle: Castle) => {\r\n     setCurrentCastle(castle);\r\n+    setSelectedCastle(castle.castles && castle.castles.length > 0 ? castle.castles[0] : null); // Initialize selectedCastle\r\n     setShowSell(true);\r\n   };\r\n \r\n   const handleInputChange = (field: keyof Castle, value: any) => {\r\n@@ -105,14 +107,13 @@\n     }\r\n   };\r\n \r\n   const handleSellSave = async () => {\r\n-    if (!currentCastle || !currentCastle.skintype) return;\r\n-  \r\n+    if (!currentCastle || !selectedCastle) return; // Added check for selectedCastle\r\n+\r\n     try {\r\n       const token = localStorage.getItem(\"accessToken\");\r\n-  \r\n-      // Post request to update customer details\r\n+\r\n       await axios.post(\r\n         \"https://www.referback.trollsufficient.com/customer/details\",\r\n         {\r\n           name: currentCastle.customerName,\r\n@@ -124,15 +125,15 @@\n             Authorization: `Bearer ${token}`,\r\n           },\r\n         }\r\n       );\r\n-  \r\n-      // Update the castle quantity\r\n+\r\n       const updatedCastle = {\r\n         ...currentCastle,\r\n-        quantity: Number(currentCastle.quantity) - Number(currentCastle.quantitySold),\r\n+        quantity:\r\n+          Number(currentCastle.quantity) - Number(currentCastle.quantitySold),\r\n       };\r\n-  \r\n+\r\n       await axios.put(\r\n         `https://www.referback.trollsufficient.com/data/castles/${currentCastle._id}`,\r\n         updatedCastle,\r\n         {\r\n@@ -140,9 +141,9 @@\n             Authorization: `Bearer ${token}`,\r\n           },\r\n         }\r\n       );\r\n-  \r\n+\r\n       // Remove the selected castle from the list\r\n       await axios.post(\r\n         `http://localhost:3000/data/castles/${currentCastle._id}/removeCastle`,\r\n         {\r\n@@ -153,9 +154,9 @@\n             Authorization: `Bearer ${token}`,\r\n           },\r\n         }\r\n       );\r\n-  \r\n+\r\n       setCastlesData((prev) =>\r\n         prev.map((castle) =>\r\n           castle._id === currentCastle._id ? updatedCastle : castle\r\n         )\r\n@@ -164,9 +165,8 @@\n     } catch (error) {\r\n       console.error(\"Error updating data:\", error);\r\n     }\r\n   };\r\n-  \r\n \r\n   const handleDropdownToggle = (id: string) => {\r\n     setActiveDropdown(activeDropdown === id ? null : id);\r\n   };\r\n@@ -220,9 +220,16 @@\n                             activeDropdown === castle._id ? styles.show : \"\"\r\n                           }`}\r\n                         >\r\n                           {castle.castles.map((castleName: string, index: number) => (\r\n-                            <a key={index} href=\"#\">\r\n+                            <a\r\n+                              key={index}\r\n+                              href=\"#\"\r\n+                              onClick={(e) => {\r\n+                                e.preventDefault();\r\n+                                setSelectedCastle(castleName); // Update selectedCastle\r\n+                              }}\r\n+                            >\r\n                               {castleName}\r\n                             </a>\r\n                           ))}\r\n                         </div>\r\n"
                },
                {
                    "date": 1723959437323,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -143,9 +143,9 @@\n         }\r\n       );\r\n \r\n       // Remove the selected castle from the list\r\n-      await axios.post(\r\n+      await axios.patch(\r\n         `http://localhost:3000/data/castles/${currentCastle._id}/removeCastle`,\r\n         {\r\n           castleName: selectedCastle\r\n         },\r\n"
                },
                {
                    "date": 1723961031897,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -70,9 +70,11 @@\n   };\r\n \r\n   const handleSell = (castle: Castle) => {\r\n     setCurrentCastle(castle);\r\n-    setSelectedCastle(castle.castles && castle.castles.length > 0 ? castle.castles[0] : null); // Initialize selectedCastle\r\n+    setSelectedCastle(\r\n+      castle.castles && castle.castles.length > 0 ? castle.castles[0] : null\r\n+    ); // Initialize selectedCastle\r\n     setShowSell(true);\r\n   };\r\n \r\n   const handleInputChange = (field: keyof Castle, value: any) => {\r\n@@ -146,9 +148,9 @@\n       // Remove the selected castle from the list\r\n       await axios.patch(\r\n         `http://localhost:3000/data/castles/${currentCastle._id}/removeCastle`,\r\n         {\r\n-          castleName: selectedCastle\r\n+          castleName: selectedCastle,\r\n         },\r\n         {\r\n           headers: {\r\n             Authorization: `Bearer ${token}`,\r\n@@ -175,53 +177,57 @@\n     <>\r\n       <div style={{ display: \"flex\" }}>\r\n         <div className={styles.cardContainer}>\r\n           {castlesData.map((castle) => (\r\n-            \r\n-              <div key={castle._id} className={styles.card}>\r\n-                <Link key={castle._id} href={\"https://wa.me/919599728762\"} style={{ textDecoration: \"none\" }}>\r\n+            <div key={castle._id} className={styles.card}>\r\n+              <Link\r\n+                key={castle._id}\r\n+                href={\"https://wa.me/919599728762\"}\r\n+                style={{ textDecoration: \"none\" }}\r\n+              >\r\n                 <Image\r\n                   src={castle.photo[0]}\r\n                   alt={castle.skintype || \"Castle Image\"}\r\n                   className={styles.cardImage}\r\n                   width={500}\r\n                   height={300}\r\n                 />\r\n-                </Link>\r\n-                <div className={styles.cardContent}>\r\n-                  <h2 className={styles.cardTitle}>\r\n-                    {toTitleCase(castle.skintype)}\r\n-                  </h2>\r\n-                  <h2 className={styles.cardTitle1}>\r\n-                    Selling Amount: {castle.sellingAmount}\r\n-                  </h2>\r\n-                  {allow && (\r\n+              </Link>\r\n+              <div className={styles.cardContent}>\r\n+                <h2 className={styles.cardTitle}>\r\n+                  {toTitleCase(castle.skintype)}\r\n+                </h2>\r\n+                <h2 className={styles.cardTitle1}>\r\n+                  Selling Amount: {castle.sellingAmount}\r\n+                </h2>\r\n+                {allow && (\r\n+                  <p className={styles.cardText}>\r\n+                    <strong>Quantity:</strong> {castle.quantity}\r\n+                  </p>\r\n+                )}\r\n+                {allow && (\r\n+                  <div className={styles.dropdownContainer}>\r\n                     <p className={styles.cardText}>\r\n-                      <strong>Quantity:</strong> {castle.quantity}\r\n+                      {/* <strong>Castles</strong> */}\r\n                     </p>\r\n-                  )}\r\n-                  {allow && (\r\n-                    <div className={styles.dropdownContainer}>\r\n-                      <p className={styles.cardText}>\r\n-                        {/* <strong>Castles</strong> */}\r\n-                      </p>\r\n-                      <div className={styles.dropdown}>\r\n-                        <button\r\n-                          className={styles.dropbtn}\r\n-                          onClick={(e) => {\r\n-                            e.stopPropagation();\r\n-                            handleDropdownToggle(castle._id);\r\n-                          }}\r\n-                        >\r\n-                          Castles\r\n-                          <span className={styles.arrowDown}></span>\r\n-                        </button>\r\n-                        <div\r\n-                          className={`${styles.dropdownContent} ${\r\n-                            activeDropdown === castle._id ? styles.show : \"\"\r\n-                          }`}\r\n-                        >\r\n-                          {castle.castles.map((castleName: string, index: number) => (\r\n+                    <div className={styles.dropdown}>\r\n+                      <button\r\n+                        className={styles.dropbtn}\r\n+                        onClick={(e) => {\r\n+                          e.stopPropagation();\r\n+                          handleDropdownToggle(castle._id);\r\n+                        }}\r\n+                      >\r\n+                        Castles\r\n+                        <span className={styles.arrowDown}></span>\r\n+                      </button>\r\n+                      <div\r\n+                        className={`${styles.dropdownContent} ${\r\n+                          activeDropdown === castle._id ? styles.show : \"\"\r\n+                        }`}\r\n+                      >\r\n+                        {castle.castles.map(\r\n+                          (castleName: string, index: number) => (\r\n                             <a\r\n                               key={index}\r\n                               href=\"#\"\r\n                               onClick={(e) => {\r\n@@ -230,44 +236,44 @@\n                               }}\r\n                             >\r\n                               {castleName}\r\n                             </a>\r\n-                          ))}\r\n-                        </div>\r\n+                          )\r\n+                        )}\r\n                       </div>\r\n                     </div>\r\n-                  )}\r\n-                  {castle.buff && castle.buff.length > 0 && (\r\n-                    <p className={styles.cardText}>\r\n-                      <strong>Buff:</strong>\r\n-                      {castle.buff.map((buffObject: any, index: number) => (\r\n-                        <div key={index}>\r\n-                          {Object.entries(buffObject).map(\r\n-                            ([buffName, buffValue]: any, idx: number) => (\r\n-                              <div key={idx}>\r\n-                                <strong>{buffName}:</strong> {buffValue}%\r\n-                              </div>\r\n-                            )\r\n-                          )}\r\n-                        </div>\r\n-                      ))}\r\n-                    </p>\r\n-                  )}\r\n-                  <div className={styles.btn}>\r\n-                    <div className={styles.left}>\r\n-                      {allow && (\r\n-                        <button onClick={() => handleEdit(castle)}>Edit</button>\r\n-                      )}\r\n-                    </div>\r\n-                    <div>\r\n-                      {allow && (\r\n-                        <button onClick={() => handleSell(castle)}>Sell</button>\r\n-                      )}\r\n-                    </div>\r\n                   </div>\r\n+                )}\r\n+                {castle.buff && castle.buff.length > 0 && (\r\n+                  <p className={styles.cardText}>\r\n+                    <strong>Buff:</strong>\r\n+                    {castle.buff.map((buffObject: any, index: number) => (\r\n+                      <div key={index}>\r\n+                        {Object.entries(buffObject).map(\r\n+                          ([buffName, buffValue]: any, idx: number) => (\r\n+                            <div key={idx}>\r\n+                              <strong>{buffName}:</strong> {buffValue}%\r\n+                            </div>\r\n+                          )\r\n+                        )}\r\n+                      </div>\r\n+                    ))}\r\n+                  </p>\r\n+                )}\r\n+                <div className={styles.btn}>\r\n+                  <div className={styles.left}>\r\n+                    {allow && (\r\n+                      <button onClick={() => handleEdit(castle)}>Edit</button>\r\n+                    )}\r\n+                  </div>\r\n+                  <div>\r\n+                    {allow && (\r\n+                      <button onClick={() => handleSell(castle)}>Sell</button>\r\n+                    )}\r\n+                  </div>\r\n                 </div>\r\n               </div>\r\n-        \r\n+            </div>\r\n           ))}\r\n         </div>\r\n       </div>\r\n       <Modal\r\n"
                }
            ],
            "date": 1723801981849,
            "name": "Commit-0",
            "content": "import React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport styles from \"./index.module.scss\";\r\nimport { useRouter } from \"next/router\";\r\nimport Image from \"next/image\";\r\nimport Modal from \"../../../Components/Modal\";\r\nimport Sell from \"../../../Components/Sell\";\r\n\r\ninterface Castle {\r\n  _id: string;\r\n  photo: string[];\r\n  skintype: string;\r\n  quantity: any;\r\n  castles: any;\r\n  buff?: any;\r\n  customerName?: string;\r\n  quantitySold?: number;\r\n}\r\n\r\n// Function to transform text to \"Title Case\" format\r\nconst toTitleCase = (text: string) => {\r\n  return text\r\n    .toLowerCase()\r\n    .split(\" \")\r\n    .map((word) => word.charAt(0).toUpperCase() + word.slice(1))\r\n    .join(\" \");\r\n};\r\n\r\nconst Index = () => {\r\n  const [castlesData, setCastlesData] = useState<Castle[]>([]);\r\n  const [showModal, setShowModal] = useState<boolean>(false);\r\n  const [showSell, setShowSell] = useState<boolean>(false);\r\n  const [currentCastle, setCurrentCastle] = useState<Castle | null>(null);\r\n  const [allow, setallow] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const admin = localStorage.getItem(\"role\");\r\n    if (admin == \"admin\") {\r\n      setallow(true);\r\n    }\r\n  }, []);\r\n  const router = useRouter();\r\n  const { Skintypes } = router.query;\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        if (Skintypes) {\r\n          const response = await axios.get(\r\n            `https://www.referback.trollsufficient.com/data/permalink/${Skintypes}`\r\n          );\r\n          setCastlesData(response.data);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error fetching data:\", error);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, [Skintypes]);\r\n\r\n  const handleEdit = (castle: Castle) => {\r\n    setCurrentCastle(castle);\r\n    setShowModal(true);\r\n  };\r\n\r\n  const handleSell = (castle: Castle) => {\r\n    setCurrentCastle(castle);\r\n    setShowSell(true);\r\n  };\r\n\r\n  const handleInputChange = (field: keyof Castle, value: any) => {\r\n    setCurrentCastle((prev) => (prev ? { ...prev, [field]: value } : null));\r\n  };\r\n\r\n  const handleSave = async () => {\r\n    if (!currentCastle) return;\r\n\r\n    try {\r\n      const token = localStorage.getItem(\"accessToken\");\r\n      await axios.put(\r\n        `https://www.referback.trollsufficient.com/data/castles/${currentCastle._id}`,\r\n        {\r\n          ...currentCastle,\r\n          quantity: Number(currentCastle.quantity),\r\n        },\r\n        {\r\n          headers: {\r\n            Authorization: `Bearer ${token}`,\r\n          },\r\n        }\r\n      );\r\n      setCastlesData((prev) =>\r\n        prev.map((castle) =>\r\n          castle._id === currentCastle._id ? currentCastle : castle\r\n        )\r\n      );\r\n      setShowModal(false);\r\n    } catch (error) {\r\n      console.error(\"Error updating data:\", error);\r\n    }\r\n  };\r\n\r\n  const handleSellSave = async () => {\r\n    if (!currentCastle) return;\r\n\r\n    try {\r\n      const token = localStorage.getItem(\"accessToken\");\r\n\r\n      await axios.post(\r\n        \"https://www.referback.trollsufficient.com/customer/details\",\r\n        {\r\n          name: currentCastle.customerName,\r\n          skintype: currentCastle.skintype,\r\n          quantity: Number(currentCastle.quantitySold),\r\n        },\r\n        {\r\n          headers: {\r\n            Authorization: `Bearer ${token}`,\r\n          },\r\n        }\r\n      );\r\n\r\n      const updatedCastle = {\r\n        ...currentCastle,\r\n        quantity:\r\n          Number(currentCastle.quantity) - Number(currentCastle.quantitySold),\r\n      };\r\n\r\n      await axios.put(\r\n        `https://www.referback.trollsufficient.com/data/castles/${currentCastle._id}`,\r\n        updatedCastle,\r\n        {\r\n          headers: {\r\n            Authorization: `Bearer ${token}`,\r\n          },\r\n        }\r\n      );\r\n\r\n      setCastlesData((prev) =>\r\n        prev.map((castle) =>\r\n          castle._id === currentCastle._id ? updatedCastle : castle\r\n        )\r\n      );\r\n      setShowSell(false);\r\n    } catch (error) {\r\n      console.error(\"Error updating data:\", error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div style={{ display: \"flex\" }}>\r\n        <div className={styles.cardContainer}>\r\n          {castlesData.map((castle) => (\r\n            <div key={castle._id} className={styles.card}>\r\n              <Image\r\n                src={castle.photo[0]}\r\n                alt={castle.skintype || \"Castle Image\"}\r\n                className={styles.cardImage}\r\n                width={500}\r\n                height={300}\r\n              />\r\n              <div className={styles.cardContent}>\r\n                <h2 className={styles.cardTitle}>\r\n                  {toTitleCase(castle.skintype)}\r\n                </h2>\r\n                <p className={styles.cardText}>\r\n                  <strong>Quantity:</strong> {castle.quantity}\r\n                </p>\r\n                <p className={styles.cardText}>\r\n                  <strong>Castles:</strong> {castle.castles.join(\", \")}\r\n                </p>\r\n                {castle.buff && castle.buff.length > 0 && (\r\n                  <p className={styles.cardText}>\r\n                    <strong>Buff:</strong>\r\n                    {castle.buff.map((buffObject: any, index: any) => (\r\n                      <div key={index}>\r\n                        {Object.entries(buffObject).map(\r\n                          ([buffName, buffValue]: any, idx) => (\r\n                            <div key={idx}>\r\n                              <strong>{buffName}:</strong> {buffValue}%\r\n                            </div>\r\n                          )\r\n                        )}\r\n                      </div>\r\n                    ))}\r\n                  </p>\r\n                )}\r\n                <div className={styles.btn}>\r\n                  <div className={styles.left}>\r\n                    {allow && (\r\n                      <button onClick={() => handleEdit(castle)}>Edit</button>\r\n                    )}\r\n                  </div>\r\n                  <div>\r\n                    {allow && (\r\n                      <button onClick={() => handleSell(castle)}>Sell</button>\r\n                    )}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n      <Modal\r\n        show={showModal}\r\n        onClose={() => setShowModal(false)}\r\n        castle={currentCastle}\r\n        handleInputChange={handleInputChange}\r\n        handleSave={handleSave}\r\n      />\r\n      <Sell\r\n        show={showSell}\r\n        onClose={() => setShowSell(false)}\r\n        castle={currentCastle}\r\n        handleInputChange={handleInputChange}\r\n        handleSave={handleSellSave}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Index;\r\n"
        }
    ]
}