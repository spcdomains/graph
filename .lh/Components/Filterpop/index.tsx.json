{
    "sourceFile": "Components/Filterpop/index.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 22,
            "patches": [
                {
                    "date": 1723799756544,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1723800032894,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,4 @@\n-// FilterPopup.tsx\r\n import React, { useRef } from 'react';\r\n import styles from './index.module.scss';\r\n \r\n interface FilterPopupProps {\r\n"
                },
                {
                    "date": 1723800293260,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import React, { useRef } from 'react';\r\n+import React, { useRef, useEffect } from 'react';\r\n import styles from './index.module.scss';\r\n \r\n interface FilterPopupProps {\r\n   filterVisible: boolean;\r\n@@ -25,53 +25,63 @@\n   handleGoClick,\r\n }) => {\r\n   const filterRef = useRef<HTMLDivElement>(null);\r\n \r\n+  // Handle clicks outside of the popup\r\n+  useEffect(() => {\r\n+    const handleClickOutside = (e: MouseEvent) => {\r\n+      if (filterRef.current && !filterRef.current.contains(e.target as Node)) {\r\n+        toggleFilterVisibility();\r\n+      }\r\n+    };\r\n+\r\n+    document.addEventListener('mousedown', handleClickOutside);\r\n+    return () => {\r\n+      document.removeEventListener('mousedown', handleClickOutside);\r\n+    };\r\n+  }, [toggleFilterVisibility]);\r\n+\r\n   return (\r\n-    <>\r\n-      {filterVisible && (\r\n-        <div\r\n-          ref={filterRef}\r\n-          className={`${styles.filter} ${filterVisible ? styles.filterVisible : ''}`}\r\n-        >\r\n-          <button className={styles.closeButton} onClick={toggleFilterVisibility}>\r\n-            &times;\r\n-          </button>\r\n-          <div className={styles.search_box}>\r\n-            <label>Search Box</label>\r\n-            <input \r\n-              placeholder=\"Search Here\" \r\n-              type=\"text\" \r\n-              value={selectedSkin}\r\n-              onChange={(e) => setSelectedSkin(e.target.value)}\r\n-            />\r\n-          </div>\r\n-          <div className={styles.search_box}>\r\n-            <label>Select Category</label>\r\n-            <input \r\n-              placeholder=\"Category\" \r\n-              type=\"text\" \r\n-              value={selectedCategory}\r\n-              onChange={(e) => setSelectedCategory(e.target.value)}\r\n-            />\r\n-          </div>\r\n-          <div className={styles.search_box}>\r\n-            <label>Select Buff</label>\r\n-            <input \r\n-              placeholder=\"Buff\" \r\n-              type=\"text\" \r\n-              value={selectedBuff}\r\n-              onChange={(e) => setSelectedBuff(e.target.value)}\r\n-            />\r\n-          </div>\r\n-          <div className={styles.btn}>\r\n-            <button onClick={handleGoClick} style={{ width: \"100px\", height: \"30px\", marginTop: \"30px\", cursor: \"pointer\" }}>\r\n-              GO\r\n-            </button>\r\n-          </div>\r\n-        </div>\r\n-      )}\r\n-    </>\r\n+    <div\r\n+      ref={filterRef}\r\n+      className={`${styles.filter} ${filterVisible ? styles.filterVisible : ''}`}\r\n+    >\r\n+      <button className={styles.closeButton} onClick={toggleFilterVisibility}>\r\n+        &times;\r\n+      </button>\r\n+      <div className={styles.search_box}>\r\n+        <label>Search Box</label>\r\n+        <input \r\n+          placeholder=\"Search Here\" \r\n+          type=\"text\" \r\n+          value={selectedSkin}\r\n+          onChange={(e) => setSelectedSkin(e.target.value)}\r\n+        />\r\n+      </div>\r\n+      <div className={styles.search_box}>\r\n+        <label>Select Category</label>\r\n+        <input \r\n+          placeholder=\"Category\" \r\n+          type=\"text\" \r\n+          value={selectedCategory}\r\n+          onChange={(e) => setSelectedCategory(e.target.value)}\r\n+        />\r\n+      </div>\r\n+      <div className={styles.search_box}>\r\n+        <label>Select Buff</label>\r\n+        <input \r\n+          placeholder=\"Buff\" \r\n+          type=\"text\" \r\n+          value={selectedBuff}\r\n+          onChange={(e) => setSelectedBuff(e.target.value)}\r\n+        />\r\n+      </div>\r\n+      <div className={styles.btn}>\r\n+        <button onClick={handleGoClick} style={{ width: \"100px\", height: \"30px\", marginTop: \"30px\", cursor: \"pointer\" }}>\r\n+          GO\r\n+        </button>\r\n+      </div>\r\n+    </div>\r\n   );\r\n };\r\n \r\n export default FilterPopup;\r\n"
                },
                {
                    "date": 1723800563535,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import React, { useRef, useEffect } from 'react';\r\n+import React, { useRef, useEffect, useState } from 'react';\r\n import styles from './index.module.scss';\r\n \r\n interface FilterPopupProps {\r\n   filterVisible: boolean;\r\n@@ -24,9 +24,34 @@\n   setSelectedBuff,\r\n   handleGoClick,\r\n }) => {\r\n   const filterRef = useRef<HTMLDivElement>(null);\r\n+  const [keyboardVisible, setKeyboardVisible] = useState<boolean>(false);\r\n \r\n+  useEffect(() => {\r\n+    const handleResize = () => {\r\n+      // Check if the virtual keyboard is open by comparing inner height\r\n+      setKeyboardVisible(window.innerHeight < document.documentElement.clientHeight);\r\n+    };\r\n+\r\n+    // Add resize event listener\r\n+    window.addEventListener('resize', handleResize);\r\n+\r\n+    // Initial check\r\n+    handleResize();\r\n+\r\n+    return () => {\r\n+      window.removeEventListener('resize', handleResize);\r\n+    };\r\n+  }, []);\r\n+\r\n+  useEffect(() => {\r\n+    // Ensure filter visibility based on keyboard status\r\n+    if (keyboardVisible) {\r\n+      filterRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n+    }\r\n+  }, [keyboardVisible]);\r\n+\r\n   // Handle clicks outside of the popup\r\n   useEffect(() => {\r\n     const handleClickOutside = (e: MouseEvent) => {\r\n       if (filterRef.current && !filterRef.current.contains(e.target as Node)) {\r\n"
                },
                {
                    "date": 1723801651042,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n import React, { useRef, useEffect, useState } from 'react';\r\n import styles from './index.module.scss';\r\n \r\n interface FilterPopupProps {\r\n-  filterVisible: boolean;\r\n+  filterVisible: boolean;  // This will now control visibility only on small screens\r\n   toggleFilterVisibility: () => void;\r\n   selectedSkin: string;\r\n   setSelectedSkin: (value: string) => void;\r\n   selectedCategory: string;\r\n@@ -24,47 +24,46 @@\n   setSelectedBuff,\r\n   handleGoClick,\r\n }) => {\r\n   const filterRef = useRef<HTMLDivElement>(null);\r\n-  const [keyboardVisible, setKeyboardVisible] = useState<boolean>(false);\r\n+  const [isMobile, setIsMobile] = useState<boolean>(false);\r\n \r\n   useEffect(() => {\r\n     const handleResize = () => {\r\n-      // Check if the virtual keyboard is open by comparing inner height\r\n-      setKeyboardVisible(window.innerHeight < document.documentElement.clientHeight);\r\n+      setIsMobile(window.innerWidth <= 768);\r\n     };\r\n \r\n-    // Add resize event listener\r\n+    handleResize();  // Initial check\r\n+\r\n     window.addEventListener('resize', handleResize);\r\n \r\n-    // Initial check\r\n-    handleResize();\r\n-\r\n     return () => {\r\n       window.removeEventListener('resize', handleResize);\r\n     };\r\n   }, []);\r\n \r\n   useEffect(() => {\r\n-    // Ensure filter visibility based on keyboard status\r\n-    if (keyboardVisible) {\r\n-      filterRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n+    if (!isMobile) {\r\n+      // Ensure the filter is visible on larger screens\r\n+      setFilterVisible(true);\r\n     }\r\n-  }, [keyboardVisible]);\r\n+  }, [isMobile]);\r\n \r\n   // Handle clicks outside of the popup\r\n   useEffect(() => {\r\n     const handleClickOutside = (e: MouseEvent) => {\r\n       if (filterRef.current && !filterRef.current.contains(e.target as Node)) {\r\n-        toggleFilterVisibility();\r\n+        if (isMobile) {\r\n+          toggleFilterVisibility();\r\n+        }\r\n       }\r\n     };\r\n \r\n     document.addEventListener('mousedown', handleClickOutside);\r\n     return () => {\r\n       document.removeEventListener('mousedown', handleClickOutside);\r\n     };\r\n-  }, [toggleFilterVisibility]);\r\n+  }, [toggleFilterVisibility, isMobile]);\r\n \r\n   return (\r\n     <div\r\n       ref={filterRef}\r\n"
                },
                {
                    "date": 1723801670253,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n import React, { useRef, useEffect, useState } from 'react';\r\n import styles from './index.module.scss';\r\n \r\n interface FilterPopupProps {\r\n-  filterVisible: boolean;  // This will now control visibility only on small screens\r\n+  filterVisible: boolean;\r\n   toggleFilterVisibility: () => void;\r\n   selectedSkin: string;\r\n   setSelectedSkin: (value: string) => void;\r\n   selectedCategory: string;\r\n@@ -24,46 +24,48 @@\n   setSelectedBuff,\r\n   handleGoClick,\r\n }) => {\r\n   const filterRef = useRef<HTMLDivElement>(null);\r\n-  const [isMobile, setIsMobile] = useState<boolean>(false);\r\n+  const [keyboardVisible, setKeyboardVisible] = useState<boolean>(false);\r\n \r\n   useEffect(() => {\r\n+    \r\n     const handleResize = () => {\r\n-      setIsMobile(window.innerWidth <= 768);\r\n+      // Check if the virtual keyboard is open by comparing inner height\r\n+      setKeyboardVisible(window.innerHeight < document.documentElement.clientHeight);\r\n     };\r\n \r\n-    handleResize();  // Initial check\r\n-\r\n+    // Add resize event listener\r\n     window.addEventListener('resize', handleResize);\r\n \r\n+    // Initial check\r\n+    handleResize();\r\n+\r\n     return () => {\r\n       window.removeEventListener('resize', handleResize);\r\n     };\r\n   }, []);\r\n \r\n   useEffect(() => {\r\n-    if (!isMobile) {\r\n-      // Ensure the filter is visible on larger screens\r\n-      setFilterVisible(true);\r\n+    // Ensure filter visibility based on keyboard status\r\n+    if (keyboardVisible) {\r\n+      filterRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n     }\r\n-  }, [isMobile]);\r\n+  }, [keyboardVisible]);\r\n \r\n   // Handle clicks outside of the popup\r\n   useEffect(() => {\r\n     const handleClickOutside = (e: MouseEvent) => {\r\n       if (filterRef.current && !filterRef.current.contains(e.target as Node)) {\r\n-        if (isMobile) {\r\n-          toggleFilterVisibility();\r\n-        }\r\n+        toggleFilterVisibility();\r\n       }\r\n     };\r\n \r\n     document.addEventListener('mousedown', handleClickOutside);\r\n     return () => {\r\n       document.removeEventListener('mousedown', handleClickOutside);\r\n     };\r\n-  }, [toggleFilterVisibility, isMobile]);\r\n+  }, [toggleFilterVisibility]);\r\n \r\n   return (\r\n     <div\r\n       ref={filterRef}\r\n"
                },
                {
                    "date": 1723801788735,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,114 @@\n+import React, { useRef, useEffect, useState } from 'react';\r\n+import styles from './index.module.scss';\r\n+\r\n+interface FilterPopupProps {\r\n+  filterVisible: boolean;\r\n+  toggleFilterVisibility: () => void;\r\n+  selectedSkin: string;\r\n+  setSelectedSkin: (value: string) => void;\r\n+  selectedCategory: string;\r\n+  setSelectedCategory: (value: string) => void;\r\n+  selectedBuff: string;\r\n+  setSelectedBuff: (value: string) => void;\r\n+  handleGoClick: () => void;\r\n+}\r\n+\r\n+const FilterPopup: React.FC<FilterPopupProps> = ({\r\n+  filterVisible,\r\n+  toggleFilterVisibility,\r\n+  selectedSkin,\r\n+  setSelectedSkin,\r\n+  selectedCategory,\r\n+  setSelectedCategory,\r\n+  selectedBuff,\r\n+  setSelectedBuff,\r\n+  handleGoClick,\r\n+}) => {\r\n+  const filterRef = useRef<HTMLDivElement>(null);\r\n+  const [keyboardVisible, setKeyboardVisible] = useState<boolean>(false);\r\n+\r\n+  useEffect(() => {\r\n+    \r\n+    const handleResize = () => {\r\n+      // Check if the virtual keyboard is open by comparing inner height\r\n+      setKeyboardVisible(window.innerHeight < document.documentElement.clientHeight);\r\n+    };\r\n+\r\n+    // Add resize event listener\r\n+    window.addEventListener('resize', handleResize);\r\n+\r\n+    // Initial check\r\n+    handleResize();\r\n+\r\n+    return () => {\r\n+      window.removeEventListener('resize', handleResize);\r\n+    };\r\n+  }, []);\r\n+\r\n+  useEffect(() => {\r\n+    // Ensure filter visibility based on keyboard status\r\n+    if (keyboardVisible) {\r\n+      filterRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n+    }\r\n+  }, [keyboardVisible]);\r\n+\r\n+  // Handle clicks outside of the popup\r\n+  useEffect(() => {\r\n+    const handleClickOutside = (e: MouseEvent) => {\r\n+      if (filterRef.current && !filterRef.current.contains(e.target as Node)) {\r\n+        toggleFilterVisibility();\r\n+      }\r\n+    };\r\n+\r\n+    document.addEventListener('mousedown', handleClickOutside);\r\n+    return () => {\r\n+      document.removeEventListener('mousedown', handleClickOutside);\r\n+    };\r\n+  }, [toggleFilterVisibility]);\r\n+\r\n+  return (\r\n+    <div\r\n+      ref={filterRef}\r\n+      className={`${styles.filter} ${filterVisible ? styles.filterVisible : ''}`}\r\n+    >\r\n+      <button className={styles.closeButton} onClick={toggleFilterVisibility}>\r\n+        &times;\r\n+      </button>\r\n+      <div className={styles.search_box}>\r\n+        <label>Search Box</label>\r\n+        <input \r\n+          placeholder=\"Search Here\" \r\n+          type=\"text\" \r\n+          value={selectedSkin}\r\n+          onChange={(e) => setSelectedSkin(e.target.value)}\r\n+        />\r\n+      </div>\r\n+      <div className={styles.search_box}>\r\n+        <label>Select Category</label>\r\n+        <input \r\n+          placeholder=\"Category\" \r\n+          type=\"text\" \r\n+          value={selectedCategory}\r\n+          onChange={(e) => setSelectedCategory(e.target.value)}\r\n+        />\r\n+      </div>\r\n+      <div className={styles.search_box}>\r\n+        <label>Select Buff</label>\r\n+        <input \r\n+          placeholder=\"Buff\" \r\n+          type=\"text\" \r\n+          value={selectedBuff}\r\n+          onChange={(e) => setSelectedBuff(e.target.value)}\r\n+        />\r\n+      </div>\r\n+      <div className={styles.btn}>\r\n+        <button onClick={handleGoClick} style={{ width: \"100px\", height: \"30px\", marginTop: \"30px\", cursor: \"pointer\" }}>\r\n+          GO\r\n+        </button>\r\n+      </div>\r\n+    </div>\r\n+  );\r\n+  \r\n+};\r\n+\r\n+export default FilterPopup;\r\n"
                },
                {
                    "date": 1723801796373,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -111,117 +111,4 @@\n   \r\n };\r\n \r\n export default FilterPopup;\r\n-import React, { useRef, useEffect, useState } from 'react';\r\n-import styles from './index.module.scss';\r\n-\r\n-interface FilterPopupProps {\r\n-  filterVisible: boolean;\r\n-  toggleFilterVisibility: () => void;\r\n-  selectedSkin: string;\r\n-  setSelectedSkin: (value: string) => void;\r\n-  selectedCategory: string;\r\n-  setSelectedCategory: (value: string) => void;\r\n-  selectedBuff: string;\r\n-  setSelectedBuff: (value: string) => void;\r\n-  handleGoClick: () => void;\r\n-}\r\n-\r\n-const FilterPopup: React.FC<FilterPopupProps> = ({\r\n-  filterVisible,\r\n-  toggleFilterVisibility,\r\n-  selectedSkin,\r\n-  setSelectedSkin,\r\n-  selectedCategory,\r\n-  setSelectedCategory,\r\n-  selectedBuff,\r\n-  setSelectedBuff,\r\n-  handleGoClick,\r\n-}) => {\r\n-  const filterRef = useRef<HTMLDivElement>(null);\r\n-  const [keyboardVisible, setKeyboardVisible] = useState<boolean>(false);\r\n-\r\n-  useEffect(() => {\r\n-    \r\n-    const handleResize = () => {\r\n-      // Check if the virtual keyboard is open by comparing inner height\r\n-      setKeyboardVisible(window.innerHeight < document.documentElement.clientHeight);\r\n-    };\r\n-\r\n-    // Add resize event listener\r\n-    window.addEventListener('resize', handleResize);\r\n-\r\n-    // Initial check\r\n-    handleResize();\r\n-\r\n-    return () => {\r\n-      window.removeEventListener('resize', handleResize);\r\n-    };\r\n-  }, []);\r\n-\r\n-  useEffect(() => {\r\n-    // Ensure filter visibility based on keyboard status\r\n-    if (keyboardVisible) {\r\n-      filterRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n-    }\r\n-  }, [keyboardVisible]);\r\n-\r\n-  // Handle clicks outside of the popup\r\n-  useEffect(() => {\r\n-    const handleClickOutside = (e: MouseEvent) => {\r\n-      if (filterRef.current && !filterRef.current.contains(e.target as Node)) {\r\n-        toggleFilterVisibility();\r\n-      }\r\n-    };\r\n-\r\n-    document.addEventListener('mousedown', handleClickOutside);\r\n-    return () => {\r\n-      document.removeEventListener('mousedown', handleClickOutside);\r\n-    };\r\n-  }, [toggleFilterVisibility]);\r\n-\r\n-  return (\r\n-    <div\r\n-      ref={filterRef}\r\n-      className={`${styles.filter} ${filterVisible ? styles.filterVisible : ''}`}\r\n-    >\r\n-      <button className={styles.closeButton} onClick={toggleFilterVisibility}>\r\n-        &times;\r\n-      </button>\r\n-      <div className={styles.search_box}>\r\n-        <label>Search Box</label>\r\n-        <input \r\n-          placeholder=\"Search Here\" \r\n-          type=\"text\" \r\n-          value={selectedSkin}\r\n-          onChange={(e) => setSelectedSkin(e.target.value)}\r\n-        />\r\n-      </div>\r\n-      <div className={styles.search_box}>\r\n-        <label>Select Category</label>\r\n-        <input \r\n-          placeholder=\"Category\" \r\n-          type=\"text\" \r\n-          value={selectedCategory}\r\n-          onChange={(e) => setSelectedCategory(e.target.value)}\r\n-        />\r\n-      </div>\r\n-      <div className={styles.search_box}>\r\n-        <label>Select Buff</label>\r\n-        <input \r\n-          placeholder=\"Buff\" \r\n-          type=\"text\" \r\n-          value={selectedBuff}\r\n-          onChange={(e) => setSelectedBuff(e.target.value)}\r\n-        />\r\n-      </div>\r\n-      <div className={styles.btn}>\r\n-        <button onClick={handleGoClick} style={{ width: \"100px\", height: \"30px\", marginTop: \"30px\", cursor: \"pointer\" }}>\r\n-          GO\r\n-        </button>\r\n-      </div>\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-export default FilterPopup;\r\n"
                },
                {
                    "date": 1723803009881,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -107,8 +107,7 @@\n         </button>\r\n       </div>\r\n     </div>\r\n   );\r\n-  \r\n };\r\n \r\n export default FilterPopup;\r\n"
                },
                {
                    "date": 1723803158608,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import React, { useRef, useEffect, useState } from 'react';\r\n+import React, { useRef } from 'react';\r\n import styles from './index.module.scss';\r\n \r\n interface FilterPopupProps {\r\n   filterVisible: boolean;\r\n@@ -24,90 +24,54 @@\n   setSelectedBuff,\r\n   handleGoClick,\r\n }) => {\r\n   const filterRef = useRef<HTMLDivElement>(null);\r\n-  const [keyboardVisible, setKeyboardVisible] = useState<boolean>(false);\r\n \r\n-  useEffect(() => {\r\n-    \r\n-    const handleResize = () => {\r\n-      // Check if the virtual keyboard is open by comparing inner height\r\n-      setKeyboardVisible(window.innerHeight < document.documentElement.clientHeight);\r\n-    };\r\n-\r\n-    // Add resize event listener\r\n-    window.addEventListener('resize', handleResize);\r\n-\r\n-    // Initial check\r\n-    handleResize();\r\n-\r\n-    return () => {\r\n-      window.removeEventListener('resize', handleResize);\r\n-    };\r\n-  }, []);\r\n-\r\n-  useEffect(() => {\r\n-    // Ensure filter visibility based on keyboard status\r\n-    if (keyboardVisible) {\r\n-      filterRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n-    }\r\n-  }, [keyboardVisible]);\r\n-\r\n-  // Handle clicks outside of the popup\r\n-  useEffect(() => {\r\n-    const handleClickOutside = (e: MouseEvent) => {\r\n-      if (filterRef.current && !filterRef.current.contains(e.target as Node)) {\r\n-        toggleFilterVisibility();\r\n-      }\r\n-    };\r\n-\r\n-    document.addEventListener('mousedown', handleClickOutside);\r\n-    return () => {\r\n-      document.removeEventListener('mousedown', handleClickOutside);\r\n-    };\r\n-  }, [toggleFilterVisibility]);\r\n-\r\n   return (\r\n-    <div\r\n-      ref={filterRef}\r\n-      className={`${styles.filter} ${filterVisible ? styles.filterVisible : ''}`}\r\n-    >\r\n-      <button className={styles.closeButton} onClick={toggleFilterVisibility}>\r\n-        &times;\r\n-      </button>\r\n-      <div className={styles.search_box}>\r\n-        <label>Search Box</label>\r\n-        <input \r\n-          placeholder=\"Search Here\" \r\n-          type=\"text\" \r\n-          value={selectedSkin}\r\n-          onChange={(e) => setSelectedSkin(e.target.value)}\r\n-        />\r\n-      </div>\r\n-      <div className={styles.search_box}>\r\n-        <label>Select Category</label>\r\n-        <input \r\n-          placeholder=\"Category\" \r\n-          type=\"text\" \r\n-          value={selectedCategory}\r\n-          onChange={(e) => setSelectedCategory(e.target.value)}\r\n-        />\r\n-      </div>\r\n-      <div className={styles.search_box}>\r\n-        <label>Select Buff</label>\r\n-        <input \r\n-          placeholder=\"Buff\" \r\n-          type=\"text\" \r\n-          value={selectedBuff}\r\n-          onChange={(e) => setSelectedBuff(e.target.value)}\r\n-        />\r\n-      </div>\r\n-      <div className={styles.btn}>\r\n-        <button onClick={handleGoClick} style={{ width: \"100px\", height: \"30px\", marginTop: \"30px\", cursor: \"pointer\" }}>\r\n-          GO\r\n-        </button>\r\n-      </div>\r\n-    </div>\r\n+    <>\r\n+      {filterVisible && (\r\n+        <div\r\n+          ref={filterRef}\r\n+          className={`${styles.filter} ${filterVisible ? styles.filterVisible : ''}`}\r\n+        >\r\n+          <button className={styles.closeButton} onClick={toggleFilterVisibility}>\r\n+            &times;\r\n+          </button>\r\n+          <div className={styles.search_box}>\r\n+            <label>Search Box</label>\r\n+            <input \r\n+              placeholder=\"Search Here\" \r\n+              type=\"text\" \r\n+              value={selectedSkin}\r\n+              onChange={(e) => setSelectedSkin(e.target.value)}\r\n+            />\r\n+          </div>\r\n+          <div className={styles.search_box}>\r\n+            <label>Select Category</label>\r\n+            <input \r\n+              placeholder=\"Category\" \r\n+              type=\"text\" \r\n+              value={selectedCategory}\r\n+              onChange={(e) => setSelectedCategory(e.target.value)}\r\n+            />\r\n+          </div>\r\n+          <div className={styles.search_box}>\r\n+            <label>Select Buff</label>\r\n+            <input \r\n+              placeholder=\"Buff\" \r\n+              type=\"text\" \r\n+              value={selectedBuff}\r\n+              onChange={(e) => setSelectedBuff(e.target.value)}\r\n+            />\r\n+          </div>\r\n+          <div className={styles.btn}>\r\n+            <button onClick={handleGoClick} style={{ width: \"100px\", height: \"30px\", marginTop: \"30px\", cursor: \"pointer\" }}>\r\n+              GO\r\n+            </button>\r\n+          </div>\r\n+        </div>\r\n+      )}\r\n+    </>\r\n   );\r\n };\r\n \r\n export default FilterPopup;\r\n"
                },
                {
                    "date": 1723803175975,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import React, { useRef } from 'react';\r\n+import React, { useRef, useEffect } from 'react';\r\n import styles from './index.module.scss';\r\n \r\n interface FilterPopupProps {\r\n   filterVisible: boolean;\r\n@@ -25,53 +25,63 @@\n   handleGoClick,\r\n }) => {\r\n   const filterRef = useRef<HTMLDivElement>(null);\r\n \r\n+  // Handle clicks outside of the popup\r\n+  useEffect(() => {\r\n+    const handleClickOutside = (e: MouseEvent) => {\r\n+      if (filterRef.current && !filterRef.current.contains(e.target as Node)) {\r\n+        toggleFilterVisibility();\r\n+      }\r\n+    };\r\n+\r\n+    document.addEventListener('mousedown', handleClickOutside);\r\n+    return () => {\r\n+      document.removeEventListener('mousedown', handleClickOutside);\r\n+    };\r\n+  }, [toggleFilterVisibility]);\r\n+\r\n   return (\r\n-    <>\r\n-      {filterVisible && (\r\n-        <div\r\n-          ref={filterRef}\r\n-          className={`${styles.filter} ${filterVisible ? styles.filterVisible : ''}`}\r\n-        >\r\n-          <button className={styles.closeButton} onClick={toggleFilterVisibility}>\r\n-            &times;\r\n-          </button>\r\n-          <div className={styles.search_box}>\r\n-            <label>Search Box</label>\r\n-            <input \r\n-              placeholder=\"Search Here\" \r\n-              type=\"text\" \r\n-              value={selectedSkin}\r\n-              onChange={(e) => setSelectedSkin(e.target.value)}\r\n-            />\r\n-          </div>\r\n-          <div className={styles.search_box}>\r\n-            <label>Select Category</label>\r\n-            <input \r\n-              placeholder=\"Category\" \r\n-              type=\"text\" \r\n-              value={selectedCategory}\r\n-              onChange={(e) => setSelectedCategory(e.target.value)}\r\n-            />\r\n-          </div>\r\n-          <div className={styles.search_box}>\r\n-            <label>Select Buff</label>\r\n-            <input \r\n-              placeholder=\"Buff\" \r\n-              type=\"text\" \r\n-              value={selectedBuff}\r\n-              onChange={(e) => setSelectedBuff(e.target.value)}\r\n-            />\r\n-          </div>\r\n-          <div className={styles.btn}>\r\n-            <button onClick={handleGoClick} style={{ width: \"100px\", height: \"30px\", marginTop: \"30px\", cursor: \"pointer\" }}>\r\n-              GO\r\n-            </button>\r\n-          </div>\r\n-        </div>\r\n-      )}\r\n-    </>\r\n+    <div\r\n+      ref={filterRef}\r\n+      className={`${styles.filter} ${filterVisible ? styles.filterVisible : ''}`}\r\n+    >\r\n+      <button className={styles.closeButton} onClick={toggleFilterVisibility}>\r\n+        &times;\r\n+      </button>\r\n+      <div className={styles.search_box}>\r\n+        <label>Search Box</label>\r\n+        <input \r\n+          placeholder=\"Search Here\" \r\n+          type=\"text\" \r\n+          value={selectedSkin}\r\n+          onChange={(e) => setSelectedSkin(e.target.value)}\r\n+        />\r\n+      </div>\r\n+      <div className={styles.search_box}>\r\n+        <label>Select Category</label>\r\n+        <input \r\n+          placeholder=\"Category\" \r\n+          type=\"text\" \r\n+          value={selectedCategory}\r\n+          onChange={(e) => setSelectedCategory(e.target.value)}\r\n+        />\r\n+      </div>\r\n+      <div className={styles.search_box}>\r\n+        <label>Select Buff</label>\r\n+        <input \r\n+          placeholder=\"Buff\" \r\n+          type=\"text\" \r\n+          value={selectedBuff}\r\n+          onChange={(e) => setSelectedBuff(e.target.value)}\r\n+        />\r\n+      </div>\r\n+      <div className={styles.btn}>\r\n+        <button onClick={handleGoClick} style={{ width: \"100px\", height: \"30px\", marginTop: \"30px\", cursor: \"pointer\" }}>\r\n+          GO\r\n+        </button>\r\n+      </div>\r\n+    </div>\r\n   );\r\n };\r\n \r\n export default FilterPopup;\r\n"
                },
                {
                    "date": 1723803399513,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import React, { useRef, useEffect } from 'react';\r\n+import React, { useRef } from 'react';\r\n import styles from './index.module.scss';\r\n \r\n interface FilterPopupProps {\r\n   filterVisible: boolean;\r\n@@ -25,63 +25,53 @@\n   handleGoClick,\r\n }) => {\r\n   const filterRef = useRef<HTMLDivElement>(null);\r\n \r\n-  // Handle clicks outside of the popup\r\n-  useEffect(() => {\r\n-    const handleClickOutside = (e: MouseEvent) => {\r\n-      if (filterRef.current && !filterRef.current.contains(e.target as Node)) {\r\n-        toggleFilterVisibility();\r\n-      }\r\n-    };\r\n-\r\n-    document.addEventListener('mousedown', handleClickOutside);\r\n-    return () => {\r\n-      document.removeEventListener('mousedown', handleClickOutside);\r\n-    };\r\n-  }, [toggleFilterVisibility]);\r\n-\r\n   return (\r\n-    <div\r\n-      ref={filterRef}\r\n-      className={`${styles.filter} ${filterVisible ? styles.filterVisible : ''}`}\r\n-    >\r\n-      <button className={styles.closeButton} onClick={toggleFilterVisibility}>\r\n-        &times;\r\n-      </button>\r\n-      <div className={styles.search_box}>\r\n-        <label>Search Box</label>\r\n-        <input \r\n-          placeholder=\"Search Here\" \r\n-          type=\"text\" \r\n-          value={selectedSkin}\r\n-          onChange={(e) => setSelectedSkin(e.target.value)}\r\n-        />\r\n-      </div>\r\n-      <div className={styles.search_box}>\r\n-        <label>Select Category</label>\r\n-        <input \r\n-          placeholder=\"Category\" \r\n-          type=\"text\" \r\n-          value={selectedCategory}\r\n-          onChange={(e) => setSelectedCategory(e.target.value)}\r\n-        />\r\n-      </div>\r\n-      <div className={styles.search_box}>\r\n-        <label>Select Buff</label>\r\n-        <input \r\n-          placeholder=\"Buff\" \r\n-          type=\"text\" \r\n-          value={selectedBuff}\r\n-          onChange={(e) => setSelectedBuff(e.target.value)}\r\n-        />\r\n-      </div>\r\n-      <div className={styles.btn}>\r\n-        <button onClick={handleGoClick} style={{ width: \"100px\", height: \"30px\", marginTop: \"30px\", cursor: \"pointer\" }}>\r\n-          GO\r\n-        </button>\r\n-      </div>\r\n-    </div>\r\n+    <>\r\n+      {filterVisible && (\r\n+        <div\r\n+          ref={filterRef}\r\n+          className={`${styles.filter} ${filterVisible ? styles.filterVisible : ''}`}\r\n+        >\r\n+          <button className={styles.closeButton} onClick={toggleFilterVisibility}>\r\n+            &times;\r\n+          </button>\r\n+          <div className={styles.search_box}>\r\n+            <label>Search Box</label>\r\n+            <input \r\n+              placeholder=\"Search Here\" \r\n+              type=\"text\" \r\n+              value={selectedSkin}\r\n+              onChange={(e) => setSelectedSkin(e.target.value)}\r\n+            />\r\n+          </div>\r\n+          <div className={styles.search_box}>\r\n+            <label>Select Category</label>\r\n+            <input \r\n+              placeholder=\"Category\" \r\n+              type=\"text\" \r\n+              value={selectedCategory}\r\n+              onChange={(e) => setSelectedCategory(e.target.value)}\r\n+            />\r\n+          </div>\r\n+          <div className={styles.search_box}>\r\n+            <label>Select Buff</label>\r\n+            <input \r\n+              placeholder=\"Buff\" \r\n+              type=\"text\" \r\n+              value={selectedBuff}\r\n+              onChange={(e) => setSelectedBuff(e.target.value)}\r\n+            />\r\n+          </div>\r\n+          <div className={styles.btn}>\r\n+            <button onClick={handleGoClick} style={{ width: \"100px\", height: \"30px\", marginTop: \"30px\", cursor: \"pointer\" }}>\r\n+              GO\r\n+            </button>\r\n+          </div>\r\n+        </div>\r\n+      )}\r\n+    </>\r\n   );\r\n };\r\n \r\n export default FilterPopup;\r\n"
                },
                {
                    "date": 1723805075150,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n-import React, { useRef } from 'react';\r\n+import React, { useRef, useEffect, useState } from 'react';\r\n import styles from './index.module.scss';\r\n \r\n interface FilterPopupProps {\r\n-  filterVisible: boolean;\r\n+  filterVisible: boolean;  // This will now control visibility only on small screens\r\n   toggleFilterVisibility: () => void;\r\n   selectedSkin: string;\r\n   setSelectedSkin: (value: string) => void;\r\n   selectedCategory: string;\r\n@@ -24,54 +24,88 @@\n   setSelectedBuff,\r\n   handleGoClick,\r\n }) => {\r\n   const filterRef = useRef<HTMLDivElement>(null);\r\n+  const [isMobile, setIsMobile] = useState<boolean>(false);\r\n \r\n+  useEffect(() => {\r\n+    const handleResize = () => {\r\n+      setIsMobile(window.innerWidth <= 768);\r\n+    };\r\n+\r\n+    handleResize();  // Initial check\r\n+\r\n+    window.addEventListener('resize', handleResize);\r\n+\r\n+    return () => {\r\n+      window.removeEventListener('resize', handleResize);\r\n+    };\r\n+  }, []);\r\n+\r\n+  useEffect(() => {\r\n+    if (!isMobile) {\r\n+      // Ensure the filter is visible on larger screens\r\n+      setFilterVisible(true);\r\n+    }\r\n+  }, [isMobile]);\r\n+\r\n+  // Handle clicks outside of the popup\r\n+  useEffect(() => {\r\n+    const handleClickOutside = (e: MouseEvent) => {\r\n+      if (filterRef.current && !filterRef.current.contains(e.target as Node)) {\r\n+        if (isMobile) {\r\n+          toggleFilterVisibility();\r\n+        }\r\n+      }\r\n+    };\r\n+\r\n+    document.addEventListener('mousedown', handleClickOutside);\r\n+    return () => {\r\n+      document.removeEventListener('mousedown', handleClickOutside);\r\n+    };\r\n+  }, [toggleFilterVisibility, isMobile]);\r\n+\r\n   return (\r\n-    <>\r\n-      {filterVisible && (\r\n-        <div\r\n-          ref={filterRef}\r\n-          className={`${styles.filter} ${filterVisible ? styles.filterVisible : ''}`}\r\n-        >\r\n-          <button className={styles.closeButton} onClick={toggleFilterVisibility}>\r\n-            &times;\r\n-          </button>\r\n-          <div className={styles.search_box}>\r\n-            <label>Search Box</label>\r\n-            <input \r\n-              placeholder=\"Search Here\" \r\n-              type=\"text\" \r\n-              value={selectedSkin}\r\n-              onChange={(e) => setSelectedSkin(e.target.value)}\r\n-            />\r\n-          </div>\r\n-          <div className={styles.search_box}>\r\n-            <label>Select Category</label>\r\n-            <input \r\n-              placeholder=\"Category\" \r\n-              type=\"text\" \r\n-              value={selectedCategory}\r\n-              onChange={(e) => setSelectedCategory(e.target.value)}\r\n-            />\r\n-          </div>\r\n-          <div className={styles.search_box}>\r\n-            <label>Select Buff</label>\r\n-            <input \r\n-              placeholder=\"Buff\" \r\n-              type=\"text\" \r\n-              value={selectedBuff}\r\n-              onChange={(e) => setSelectedBuff(e.target.value)}\r\n-            />\r\n-          </div>\r\n-          <div className={styles.btn}>\r\n-            <button onClick={handleGoClick} style={{ width: \"100px\", height: \"30px\", marginTop: \"30px\", cursor: \"pointer\" }}>\r\n-              GO\r\n-            </button>\r\n-          </div>\r\n-        </div>\r\n-      )}\r\n-    </>\r\n+    <div\r\n+      ref={filterRef}\r\n+      className={`${styles.filter} ${filterVisible ? styles.filterVisible : ''}`}\r\n+    >\r\n+      <button className={styles.closeButton} onClick={toggleFilterVisibility}>\r\n+        &times;\r\n+      </button>\r\n+      <div className={styles.search_box}>\r\n+        <label>Search Box</label>\r\n+        <input \r\n+          placeholder=\"Search Here\" \r\n+          type=\"text\" \r\n+          value={selectedSkin}\r\n+          onChange={(e) => setSelectedSkin(e.target.value)}\r\n+        />\r\n+      </div>\r\n+      <div className={styles.search_box}>\r\n+        <label>Select Category</label>\r\n+        <input \r\n+          placeholder=\"Category\" \r\n+          type=\"text\" \r\n+          value={selectedCategory}\r\n+          onChange={(e) => setSelectedCategory(e.target.value)}\r\n+        />\r\n+      </div>\r\n+      <div className={styles.search_box}>\r\n+        <label>Select Buff</label>\r\n+        <input \r\n+          placeholder=\"Buff\" \r\n+          type=\"text\" \r\n+          value={selectedBuff}\r\n+          onChange={(e) => setSelectedBuff(e.target.value)}\r\n+        />\r\n+      </div>\r\n+      <div className={styles.btn}>\r\n+        <button onClick={handleGoClick} style={{ width: \"100px\", height: \"30px\", marginTop: \"30px\", cursor: \"pointer\" }}>\r\n+          GO\r\n+        </button>\r\n+      </div>\r\n+    </div>\r\n   );\r\n };\r\n \r\n export default FilterPopup;\r\n"
                },
                {
                    "date": 1723811823249,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n import React, { useRef, useEffect, useState } from 'react';\r\n import styles from './index.module.scss';\r\n \r\n interface FilterPopupProps {\r\n-  filterVisible: boolean;  // This will now control visibility only on small screens\r\n+  filterVisible: boolean;\r\n   toggleFilterVisibility: () => void;\r\n   selectedSkin: string;\r\n   setSelectedSkin: (value: string) => void;\r\n   selectedCategory: string;\r\n@@ -24,76 +24,60 @@\n   setSelectedBuff,\r\n   handleGoClick,\r\n }) => {\r\n   const filterRef = useRef<HTMLDivElement>(null);\r\n-  const [isMobile, setIsMobile] = useState<boolean>(false);\r\n \r\n   useEffect(() => {\r\n-    const handleResize = () => {\r\n-      setIsMobile(window.innerWidth <= 768);\r\n-    };\r\n-\r\n-    handleResize();  // Initial check\r\n-\r\n-    window.addEventListener('resize', handleResize);\r\n-\r\n-    return () => {\r\n-      window.removeEventListener('resize', handleResize);\r\n-    };\r\n-  }, []);\r\n-\r\n-  useEffect(() => {\r\n-    if (!isMobile) {\r\n-      // Ensure the filter is visible on larger screens\r\n-      setFilterVisible(true);\r\n-    }\r\n-  }, [isMobile]);\r\n-\r\n-  // Handle clicks outside of the popup\r\n-  useEffect(() => {\r\n     const handleClickOutside = (e: MouseEvent) => {\r\n       if (filterRef.current && !filterRef.current.contains(e.target as Node)) {\r\n-        if (isMobile) {\r\n-          toggleFilterVisibility();\r\n-        }\r\n+        toggleFilterVisibility();\r\n       }\r\n     };\r\n \r\n     document.addEventListener('mousedown', handleClickOutside);\r\n     return () => {\r\n       document.removeEventListener('mousedown', handleClickOutside);\r\n     };\r\n-  }, [toggleFilterVisibility, isMobile]);\r\n+  }, [toggleFilterVisibility]);\r\n \r\n   return (\r\n     <div\r\n       ref={filterRef}\r\n       className={`${styles.filter} ${filterVisible ? styles.filterVisible : ''}`}\r\n+      role=\"dialog\" // Accessibility improvement\r\n+      aria-labelledby=\"filter-dialog-title\"\r\n     >\r\n-      <button className={styles.closeButton} onClick={toggleFilterVisibility}>\r\n+      <button\r\n+        className={styles.closeButton}\r\n+        onClick={toggleFilterVisibility}\r\n+        aria-label=\"Close Filter\" // Accessibility improvement\r\n+      >\r\n         &times;\r\n       </button>\r\n       <div className={styles.search_box}>\r\n-        <label>Search Box</label>\r\n+        <label htmlFor=\"search-skin\">Search Box</label>\r\n         <input \r\n+          id=\"search-skin\"\r\n           placeholder=\"Search Here\" \r\n           type=\"text\" \r\n           value={selectedSkin}\r\n           onChange={(e) => setSelectedSkin(e.target.value)}\r\n         />\r\n       </div>\r\n       <div className={styles.search_box}>\r\n-        <label>Select Category</label>\r\n+        <label htmlFor=\"select-category\">Select Category</label>\r\n         <input \r\n+          id=\"select-category\"\r\n           placeholder=\"Category\" \r\n           type=\"text\" \r\n           value={selectedCategory}\r\n           onChange={(e) => setSelectedCategory(e.target.value)}\r\n         />\r\n       </div>\r\n       <div className={styles.search_box}>\r\n-        <label>Select Buff</label>\r\n+        <label htmlFor=\"select-buff\">Select Buff</label>\r\n         <input \r\n+          id=\"select-buff\"\r\n           placeholder=\"Buff\" \r\n           type=\"text\" \r\n           value={selectedBuff}\r\n           onChange={(e) => setSelectedBuff(e.target.value)}\r\n"
                },
                {
                    "date": 1723811846579,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import React, { useRef, useEffect, useState } from 'react';\r\n+import React, { useRef } from 'react';\r\n import styles from './index.module.scss';\r\n \r\n interface FilterPopupProps {\r\n   filterVisible: boolean;\r\n@@ -25,71 +25,53 @@\n   handleGoClick,\r\n }) => {\r\n   const filterRef = useRef<HTMLDivElement>(null);\r\n \r\n-  useEffect(() => {\r\n-    const handleClickOutside = (e: MouseEvent) => {\r\n-      if (filterRef.current && !filterRef.current.contains(e.target as Node)) {\r\n-        toggleFilterVisibility();\r\n-      }\r\n-    };\r\n-\r\n-    document.addEventListener('mousedown', handleClickOutside);\r\n-    return () => {\r\n-      document.removeEventListener('mousedown', handleClickOutside);\r\n-    };\r\n-  }, [toggleFilterVisibility]);\r\n-\r\n   return (\r\n-    <div\r\n-      ref={filterRef}\r\n-      className={`${styles.filter} ${filterVisible ? styles.filterVisible : ''}`}\r\n-      role=\"dialog\" // Accessibility improvement\r\n-      aria-labelledby=\"filter-dialog-title\"\r\n-    >\r\n-      <button\r\n-        className={styles.closeButton}\r\n-        onClick={toggleFilterVisibility}\r\n-        aria-label=\"Close Filter\" // Accessibility improvement\r\n-      >\r\n-        &times;\r\n-      </button>\r\n-      <div className={styles.search_box}>\r\n-        <label htmlFor=\"search-skin\">Search Box</label>\r\n-        <input \r\n-          id=\"search-skin\"\r\n-          placeholder=\"Search Here\" \r\n-          type=\"text\" \r\n-          value={selectedSkin}\r\n-          onChange={(e) => setSelectedSkin(e.target.value)}\r\n-        />\r\n-      </div>\r\n-      <div className={styles.search_box}>\r\n-        <label htmlFor=\"select-category\">Select Category</label>\r\n-        <input \r\n-          id=\"select-category\"\r\n-          placeholder=\"Category\" \r\n-          type=\"text\" \r\n-          value={selectedCategory}\r\n-          onChange={(e) => setSelectedCategory(e.target.value)}\r\n-        />\r\n-      </div>\r\n-      <div className={styles.search_box}>\r\n-        <label htmlFor=\"select-buff\">Select Buff</label>\r\n-        <input \r\n-          id=\"select-buff\"\r\n-          placeholder=\"Buff\" \r\n-          type=\"text\" \r\n-          value={selectedBuff}\r\n-          onChange={(e) => setSelectedBuff(e.target.value)}\r\n-        />\r\n-      </div>\r\n-      <div className={styles.btn}>\r\n-        <button onClick={handleGoClick} style={{ width: \"100px\", height: \"30px\", marginTop: \"30px\", cursor: \"pointer\" }}>\r\n-          GO\r\n-        </button>\r\n-      </div>\r\n-    </div>\r\n+    <>\r\n+      {filterVisible && (\r\n+        <div\r\n+          ref={filterRef}\r\n+          className={`${styles.filter} ${filterVisible ? styles.filterVisible : ''}`}\r\n+        >\r\n+          <button className={styles.closeButton} onClick={toggleFilterVisibility}>\r\n+            &times;\r\n+          </button>\r\n+          <div className={styles.search_box}>\r\n+            <label>Search Box</label>\r\n+            <input \r\n+              placeholder=\"Search Here\" \r\n+              type=\"text\" \r\n+              value={selectedSkin}\r\n+              onChange={(e) => setSelectedSkin(e.target.value)}\r\n+            />\r\n+          </div>\r\n+          <div className={styles.search_box}>\r\n+            <label>Select Category</label>\r\n+            <input \r\n+              placeholder=\"Category\" \r\n+              type=\"text\" \r\n+              value={selectedCategory}\r\n+              onChange={(e) => setSelectedCategory(e.target.value)}\r\n+            />\r\n+          </div>\r\n+          <div className={styles.search_box}>\r\n+            <label>Select Buff</label>\r\n+            <input \r\n+              placeholder=\"Buff\" \r\n+              type=\"text\" \r\n+              value={selectedBuff}\r\n+              onChange={(e) => setSelectedBuff(e.target.value)}\r\n+            />\r\n+          </div>\r\n+          <div className={styles.btn}>\r\n+            <button onClick={handleGoClick} style={{ width: \"100px\", height: \"30px\", marginTop: \"30px\", cursor: \"pointer\" }}>\r\n+              GO\r\n+            </button>\r\n+          </div>\r\n+        </div>\r\n+      )}\r\n+    </>\r\n   );\r\n };\r\n \r\n export default FilterPopup;\r\n"
                },
                {
                    "date": 1723811851677,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,5 @@\n+// FilterPopup.tsx\r\n import React, { useRef } from 'react';\r\n import styles from './index.module.scss';\r\n \r\n interface FilterPopupProps {\r\n"
                },
                {
                    "date": 1723811857871,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,5 @@\n-// FilterPopup.tsx\r\n-import React, { useRef } from 'react';\r\n+import React, { useRef, useEffect, useState } from 'react';\r\n import styles from './index.module.scss';\r\n \r\n interface FilterPopupProps {\r\n   filterVisible: boolean;\r\n@@ -26,53 +25,71 @@\n   handleGoClick,\r\n }) => {\r\n   const filterRef = useRef<HTMLDivElement>(null);\r\n \r\n+  useEffect(() => {\r\n+    const handleClickOutside = (e: MouseEvent) => {\r\n+      if (filterRef.current && !filterRef.current.contains(e.target as Node)) {\r\n+        toggleFilterVisibility();\r\n+      }\r\n+    };\r\n+\r\n+    document.addEventListener('mousedown', handleClickOutside);\r\n+    return () => {\r\n+      document.removeEventListener('mousedown', handleClickOutside);\r\n+    };\r\n+  }, [toggleFilterVisibility]);\r\n+\r\n   return (\r\n-    <>\r\n-      {filterVisible && (\r\n-        <div\r\n-          ref={filterRef}\r\n-          className={`${styles.filter} ${filterVisible ? styles.filterVisible : ''}`}\r\n-        >\r\n-          <button className={styles.closeButton} onClick={toggleFilterVisibility}>\r\n-            &times;\r\n-          </button>\r\n-          <div className={styles.search_box}>\r\n-            <label>Search Box</label>\r\n-            <input \r\n-              placeholder=\"Search Here\" \r\n-              type=\"text\" \r\n-              value={selectedSkin}\r\n-              onChange={(e) => setSelectedSkin(e.target.value)}\r\n-            />\r\n-          </div>\r\n-          <div className={styles.search_box}>\r\n-            <label>Select Category</label>\r\n-            <input \r\n-              placeholder=\"Category\" \r\n-              type=\"text\" \r\n-              value={selectedCategory}\r\n-              onChange={(e) => setSelectedCategory(e.target.value)}\r\n-            />\r\n-          </div>\r\n-          <div className={styles.search_box}>\r\n-            <label>Select Buff</label>\r\n-            <input \r\n-              placeholder=\"Buff\" \r\n-              type=\"text\" \r\n-              value={selectedBuff}\r\n-              onChange={(e) => setSelectedBuff(e.target.value)}\r\n-            />\r\n-          </div>\r\n-          <div className={styles.btn}>\r\n-            <button onClick={handleGoClick} style={{ width: \"100px\", height: \"30px\", marginTop: \"30px\", cursor: \"pointer\" }}>\r\n-              GO\r\n-            </button>\r\n-          </div>\r\n-        </div>\r\n-      )}\r\n-    </>\r\n+    <div\r\n+      ref={filterRef}\r\n+      className={`${styles.filter} ${filterVisible ? styles.filterVisible : ''}`}\r\n+      role=\"dialog\" // Accessibility improvement\r\n+      aria-labelledby=\"filter-dialog-title\"\r\n+    >\r\n+      <button\r\n+        className={styles.closeButton}\r\n+        onClick={toggleFilterVisibility}\r\n+        aria-label=\"Close Filter\" // Accessibility improvement\r\n+      >\r\n+        &times;\r\n+      </button>\r\n+      <div className={styles.search_box}>\r\n+        <label htmlFor=\"search-skin\">Search Box</label>\r\n+        <input \r\n+          id=\"search-skin\"\r\n+          placeholder=\"Search Here\" \r\n+          type=\"text\" \r\n+          value={selectedSkin}\r\n+          onChange={(e) => setSelectedSkin(e.target.value)}\r\n+        />\r\n+      </div>\r\n+      <div className={styles.search_box}>\r\n+        <label htmlFor=\"select-category\">Select Category</label>\r\n+        <input \r\n+          id=\"select-category\"\r\n+          placeholder=\"Category\" \r\n+          type=\"text\" \r\n+          value={selectedCategory}\r\n+          onChange={(e) => setSelectedCategory(e.target.value)}\r\n+        />\r\n+      </div>\r\n+      <div className={styles.search_box}>\r\n+        <label htmlFor=\"select-buff\">Select Buff</label>\r\n+        <input \r\n+          id=\"select-buff\"\r\n+          placeholder=\"Buff\" \r\n+          type=\"text\" \r\n+          value={selectedBuff}\r\n+          onChange={(e) => setSelectedBuff(e.target.value)}\r\n+        />\r\n+      </div>\r\n+      <div className={styles.btn}>\r\n+        <button onClick={handleGoClick} style={{ width: \"100px\", height: \"30px\", marginTop: \"30px\", cursor: \"pointer\" }}>\r\n+          GO\r\n+        </button>\r\n+      </div>\r\n+    </div>\r\n   );\r\n };\r\n \r\n export default FilterPopup;\r\n"
                },
                {
                    "date": 1723811863838,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,10 +24,36 @@\n   setSelectedBuff,\r\n   handleGoClick,\r\n }) => {\r\n   const filterRef = useRef<HTMLDivElement>(null);\r\n+  const [keyboardVisible, setKeyboardVisible] = useState<boolean>(false);\r\n \r\n   useEffect(() => {\r\n+    const handleResize = () => {\r\n+      // Check if the virtual keyboard is open by comparing inner height\r\n+      setKeyboardVisible(window.innerHeight < document.documentElement.clientHeight);\r\n+    };\r\n+\r\n+    // Add resize event listener\r\n+    window.addEventListener('resize', handleResize);\r\n+\r\n+    // Initial check\r\n+    handleResize();\r\n+\r\n+    return () => {\r\n+      window.removeEventListener('resize', handleResize);\r\n+    };\r\n+  }, []);\r\n+\r\n+  useEffect(() => {\r\n+    // Ensure filter visibility based on keyboard status\r\n+    if (keyboardVisible) {\r\n+      filterRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n+    }\r\n+  }, [keyboardVisible]);\r\n+\r\n+  // Handle clicks outside of the popup\r\n+  useEffect(() => {\r\n     const handleClickOutside = (e: MouseEvent) => {\r\n       if (filterRef.current && !filterRef.current.contains(e.target as Node)) {\r\n         toggleFilterVisibility();\r\n       }\r\n@@ -42,42 +68,33 @@\n   return (\r\n     <div\r\n       ref={filterRef}\r\n       className={`${styles.filter} ${filterVisible ? styles.filterVisible : ''}`}\r\n-      role=\"dialog\" // Accessibility improvement\r\n-      aria-labelledby=\"filter-dialog-title\"\r\n     >\r\n-      <button\r\n-        className={styles.closeButton}\r\n-        onClick={toggleFilterVisibility}\r\n-        aria-label=\"Close Filter\" // Accessibility improvement\r\n-      >\r\n+      <button className={styles.closeButton} onClick={toggleFilterVisibility}>\r\n         &times;\r\n       </button>\r\n       <div className={styles.search_box}>\r\n-        <label htmlFor=\"search-skin\">Search Box</label>\r\n+        <label>Search Box</label>\r\n         <input \r\n-          id=\"search-skin\"\r\n           placeholder=\"Search Here\" \r\n           type=\"text\" \r\n           value={selectedSkin}\r\n           onChange={(e) => setSelectedSkin(e.target.value)}\r\n         />\r\n       </div>\r\n       <div className={styles.search_box}>\r\n-        <label htmlFor=\"select-category\">Select Category</label>\r\n+        <label>Select Category</label>\r\n         <input \r\n-          id=\"select-category\"\r\n           placeholder=\"Category\" \r\n           type=\"text\" \r\n           value={selectedCategory}\r\n           onChange={(e) => setSelectedCategory(e.target.value)}\r\n         />\r\n       </div>\r\n       <div className={styles.search_box}>\r\n-        <label htmlFor=\"select-buff\">Select Buff</label>\r\n+        <label>Select Buff</label>\r\n         <input \r\n-          id=\"select-buff\"\r\n           placeholder=\"Buff\" \r\n           type=\"text\" \r\n           value={selectedBuff}\r\n           onChange={(e) => setSelectedBuff(e.target.value)}\r\n"
                },
                {
                    "date": 1723814494761,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import React, { useRef, useEffect, useState } from 'react';\r\n+import React, { useRef } from 'react';\r\n import styles from './index.module.scss';\r\n \r\n interface FilterPopupProps {\r\n   filterVisible: boolean;\r\n@@ -24,89 +24,54 @@\n   setSelectedBuff,\r\n   handleGoClick,\r\n }) => {\r\n   const filterRef = useRef<HTMLDivElement>(null);\r\n-  const [keyboardVisible, setKeyboardVisible] = useState<boolean>(false);\r\n \r\n-  useEffect(() => {\r\n-    const handleResize = () => {\r\n-      // Check if the virtual keyboard is open by comparing inner height\r\n-      setKeyboardVisible(window.innerHeight < document.documentElement.clientHeight);\r\n-    };\r\n-\r\n-    // Add resize event listener\r\n-    window.addEventListener('resize', handleResize);\r\n-\r\n-    // Initial check\r\n-    handleResize();\r\n-\r\n-    return () => {\r\n-      window.removeEventListener('resize', handleResize);\r\n-    };\r\n-  }, []);\r\n-\r\n-  useEffect(() => {\r\n-    // Ensure filter visibility based on keyboard status\r\n-    if (keyboardVisible) {\r\n-      filterRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n-    }\r\n-  }, [keyboardVisible]);\r\n-\r\n-  // Handle clicks outside of the popup\r\n-  useEffect(() => {\r\n-    const handleClickOutside = (e: MouseEvent) => {\r\n-      if (filterRef.current && !filterRef.current.contains(e.target as Node)) {\r\n-        toggleFilterVisibility();\r\n-      }\r\n-    };\r\n-\r\n-    document.addEventListener('mousedown', handleClickOutside);\r\n-    return () => {\r\n-      document.removeEventListener('mousedown', handleClickOutside);\r\n-    };\r\n-  }, [toggleFilterVisibility]);\r\n-\r\n   return (\r\n-    <div\r\n-      ref={filterRef}\r\n-      className={`${styles.filter} ${filterVisible ? styles.filterVisible : ''}`}\r\n-    >\r\n-      <button className={styles.closeButton} onClick={toggleFilterVisibility}>\r\n-        &times;\r\n-      </button>\r\n-      <div className={styles.search_box}>\r\n-        <label>Search Box</label>\r\n-        <input \r\n-          placeholder=\"Search Here\" \r\n-          type=\"text\" \r\n-          value={selectedSkin}\r\n-          onChange={(e) => setSelectedSkin(e.target.value)}\r\n-        />\r\n-      </div>\r\n-      <div className={styles.search_box}>\r\n-        <label>Select Category</label>\r\n-        <input \r\n-          placeholder=\"Category\" \r\n-          type=\"text\" \r\n-          value={selectedCategory}\r\n-          onChange={(e) => setSelectedCategory(e.target.value)}\r\n-        />\r\n-      </div>\r\n-      <div className={styles.search_box}>\r\n-        <label>Select Buff</label>\r\n-        <input \r\n-          placeholder=\"Buff\" \r\n-          type=\"text\" \r\n-          value={selectedBuff}\r\n-          onChange={(e) => setSelectedBuff(e.target.value)}\r\n-        />\r\n-      </div>\r\n-      <div className={styles.btn}>\r\n-        <button onClick={handleGoClick} style={{ width: \"100px\", height: \"30px\", marginTop: \"30px\", cursor: \"pointer\" }}>\r\n-          GO\r\n-        </button>\r\n-      </div>\r\n-    </div>\r\n+    <>\r\n+      {filterVisible && (\r\n+        <div\r\n+          ref={filterRef}\r\n+          className={`${styles.filter} ${filterVisible ? styles.filterVisible : ''}`}\r\n+        >\r\n+          <button className={styles.closeButton} onClick={toggleFilterVisibility}>\r\n+            &times;\r\n+          </button>\r\n+          <div className={styles.search_box}>\r\n+            <label>Search Box</label>\r\n+            <input \r\n+              placeholder=\"Search Here\" \r\n+              type=\"text\" \r\n+              value={selectedSkin}\r\n+              onChange={(e) => setSelectedSkin(e.target.value)}\r\n+            />\r\n+          </div>\r\n+          <div className={styles.search_box}>\r\n+            <label>Select Category</label>\r\n+            <input \r\n+              placeholder=\"Category\" \r\n+              type=\"text\" \r\n+              value={selectedCategory}\r\n+              onChange={(e) => setSelectedCategory(e.target.value)}\r\n+            />\r\n+          </div>\r\n+          <div className={styles.search_box}>\r\n+            <label>Select Buff</label>\r\n+            <input \r\n+              placeholder=\"Buff\" \r\n+              type=\"text\" \r\n+              value={selectedBuff}\r\n+              onChange={(e) => setSelectedBuff(e.target.value)}\r\n+            />\r\n+          </div>\r\n+          <div className={styles.btn}>\r\n+            <button onClick={handleGoClick} style={{ width: \"100px\", height: \"30px\", marginTop: \"30px\", cursor: \"pointer\" }}>\r\n+              GO\r\n+            </button>\r\n+          </div>\r\n+        </div>\r\n+      )}\r\n+    </>\r\n   );\r\n };\r\n \r\n export default FilterPopup;\r\n"
                },
                {
                    "date": 1723815291187,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,25 +45,26 @@\n               onChange={(e) => setSelectedSkin(e.target.value)}\r\n             />\r\n           </div>\r\n           <div className={styles.search_box}>\r\n-            <label>Select Category</label>\r\n+            <label>SKIN NAME</label>\r\n             <input \r\n-              placeholder=\"Category\" \r\n+              placeholder=\"Buff\" \r\n               type=\"text\" \r\n-              value={selectedCategory}\r\n-              onChange={(e) => setSelectedCategory(e.target.value)}\r\n+              value={selectedBuff}\r\n+              onChange={(e) => setSelectedBuff(e.target.value)}\r\n             />\r\n           </div>\r\n           <div className={styles.search_box}>\r\n-            <label>Select Buff</label>\r\n+            <label>Select Category</label>\r\n             <input \r\n-              placeholder=\"Buff\" \r\n+              placeholder=\"Category\" \r\n               type=\"text\" \r\n-              value={selectedBuff}\r\n-              onChange={(e) => setSelectedBuff(e.target.value)}\r\n+              value={selectedCategory}\r\n+              onChange={(e) => setSelectedCategory(e.target.value)}\r\n             />\r\n           </div>\r\n+         \r\n           <div className={styles.btn}>\r\n             <button onClick={handleGoClick} style={{ width: \"100px\", height: \"30px\", marginTop: \"30px\", cursor: \"pointer\" }}>\r\n               GO\r\n             </button>\r\n"
                },
                {
                    "date": 1723815310165,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,9 +45,9 @@\n               onChange={(e) => setSelectedSkin(e.target.value)}\r\n             />\r\n           </div>\r\n           <div className={styles.search_box}>\r\n-            <label>SKIN NAME</label>\r\n+            <label>Skin Name</label>\r\n             <input \r\n               placeholder=\"Buff\" \r\n               type=\"text\" \r\n               value={selectedBuff}\r\n"
                },
                {
                    "date": 1723815332064,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -54,9 +54,9 @@\n               onChange={(e) => setSelectedBuff(e.target.value)}\r\n             />\r\n           </div>\r\n           <div className={styles.search_box}>\r\n-            <label>Select Category</label>\r\n+            <label>Category Name</label>\r\n             <input \r\n               placeholder=\"Category\" \r\n               type=\"text\" \r\n               value={selectedCategory}\r\n"
                },
                {
                    "date": 1723815349228,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -47,9 +47,9 @@\n           </div>\r\n           <div className={styles.search_box}>\r\n             <label>Skin Name</label>\r\n             <input \r\n-              placeholder=\"Buff\" \r\n+              placeholder=\"Skin \" \r\n               type=\"text\" \r\n               value={selectedBuff}\r\n               onChange={(e) => setSelectedBuff(e.target.value)}\r\n             />\r\n"
                }
            ],
            "date": 1723799756544,
            "name": "Commit-0",
            "content": "// FilterPopup.tsx\r\nimport React, { useRef } from 'react';\r\nimport styles from './index.module.scss';\r\n\r\ninterface FilterPopupProps {\r\n  filterVisible: boolean;\r\n  toggleFilterVisibility: () => void;\r\n  selectedSkin: string;\r\n  setSelectedSkin: (value: string) => void;\r\n  selectedCategory: string;\r\n  setSelectedCategory: (value: string) => void;\r\n  selectedBuff: string;\r\n  setSelectedBuff: (value: string) => void;\r\n  handleGoClick: () => void;\r\n}\r\n\r\nconst FilterPopup: React.FC<FilterPopupProps> = ({\r\n  filterVisible,\r\n  toggleFilterVisibility,\r\n  selectedSkin,\r\n  setSelectedSkin,\r\n  selectedCategory,\r\n  setSelectedCategory,\r\n  selectedBuff,\r\n  setSelectedBuff,\r\n  handleGoClick,\r\n}) => {\r\n  const filterRef = useRef<HTMLDivElement>(null);\r\n\r\n  return (\r\n    <>\r\n      {filterVisible && (\r\n        <div\r\n          ref={filterRef}\r\n          className={`${styles.filter} ${filterVisible ? styles.filterVisible : ''}`}\r\n        >\r\n          <button className={styles.closeButton} onClick={toggleFilterVisibility}>\r\n            &times;\r\n          </button>\r\n          <div className={styles.search_box}>\r\n            <label>Search Box</label>\r\n            <input \r\n              placeholder=\"Search Here\" \r\n              type=\"text\" \r\n              value={selectedSkin}\r\n              onChange={(e) => setSelectedSkin(e.target.value)}\r\n            />\r\n          </div>\r\n          <div className={styles.search_box}>\r\n            <label>Select Category</label>\r\n            <input \r\n              placeholder=\"Category\" \r\n              type=\"text\" \r\n              value={selectedCategory}\r\n              onChange={(e) => setSelectedCategory(e.target.value)}\r\n            />\r\n          </div>\r\n          <div className={styles.search_box}>\r\n            <label>Select Buff</label>\r\n            <input \r\n              placeholder=\"Buff\" \r\n              type=\"text\" \r\n              value={selectedBuff}\r\n              onChange={(e) => setSelectedBuff(e.target.value)}\r\n            />\r\n          </div>\r\n          <div className={styles.btn}>\r\n            <button onClick={handleGoClick} style={{ width: \"100px\", height: \"30px\", marginTop: \"30px\", cursor: \"pointer\" }}>\r\n              GO\r\n            </button>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default FilterPopup;\r\n"
        }
    ]
}