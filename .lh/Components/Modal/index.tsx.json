{
    "sourceFile": "Components/Modal/index.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1723960436705,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1723960833736,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -91,9 +91,9 @@\n             <label>Buff</label>\r\n             <div>\r\n               {castle.buff && castle.buff.map((buffObject: any, index: number) => (\r\n                 <div key={index}>\r\n-                  {Object.entries(buffObject).map(([buffName, buffValue]: [string, string], idx: number) => (\r\n+                  {Object.entries(buffObject).map(([buffName, buffValue]: [string, any], idx: number) => (\r\n                     <div key={idx}>\r\n                       <strong>{buffName}:</strong> {buffValue}%\r\n                     </div>\r\n                   ))}\r\n"
                },
                {
                    "date": 1723960936611,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,17 +8,21 @@\n \r\n   if (!show || !castle) return null;\r\n \r\n   const addCastle = () => {\r\n-    if (newCastle.trim()) {\r\n-      handleInputChange('castles', [...castle.castles, newCastle.trim()]);\r\n+    const trimmedCastle = newCastle.trim();\r\n+    if (trimmedCastle) {\r\n+      handleInputChange('castles', [...castle.castles, trimmedCastle]);\r\n       setNewCastle('');\r\n     }\r\n   };\r\n \r\n   const addBuff = () => {\r\n-    if (newBuffName.trim() && newBuffValue.trim()) {\r\n-      const newBuff = { [newBuffName.trim()]: newBuffValue.trim() };\r\n+    const trimmedBuffName = newBuffName.trim();\r\n+    const trimmedBuffValue = newBuffValue.trim();\r\n+\r\n+    if (trimmedBuffName && trimmedBuffValue) {\r\n+      const newBuff = { [trimmedBuffName]: trimmedBuffValue };\r\n       handleInputChange('buff', [...castle.buff, newBuff]);\r\n       setNewBuffName('');\r\n       setNewBuffValue('');\r\n     }\r\n@@ -54,9 +58,9 @@\n             <label>Castles</label>\r\n             <input\r\n               type=\"text\"\r\n               value={castle.castles ? castle.castles.join(', ') : ''} // Join array elements with a comma and space\r\n-              onChange={(e) => handleInputChange('castles', e.target.value.split(',').map(item => item.trim()))} // Split by comma and trim whitespace\r\n+              onChange={(e) => handleInputChange('castles', e.target.value.split(',').map(item => item.trim()).filter(item => item))} // Split by comma, trim whitespace, and filter out empty items\r\n             />\r\n             <input\r\n               type=\"text\"\r\n               value={newCastle}\r\n@@ -91,9 +95,9 @@\n             <label>Buff</label>\r\n             <div>\r\n               {castle.buff && castle.buff.map((buffObject: any, index: number) => (\r\n                 <div key={index}>\r\n-                  {Object.entries(buffObject).map(([buffName, buffValue]: [string, any], idx: number) => (\r\n+                  {Object.entries(buffObject).map(([buffName, buffValue]: [string, string], idx: number) => (\r\n                     <div key={idx}>\r\n                       <strong>{buffName}:</strong> {buffValue}%\r\n                     </div>\r\n                   ))}\r\n"
                },
                {
                    "date": 1723960945249,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -95,9 +95,9 @@\n             <label>Buff</label>\r\n             <div>\r\n               {castle.buff && castle.buff.map((buffObject: any, index: number) => (\r\n                 <div key={index}>\r\n-                  {Object.entries(buffObject).map(([buffName, buffValue]: [string, string], idx: number) => (\r\n+                  {Object.entries(buffObject).map(([buffName, buffValue]: [any, any], idx: number) => (\r\n                     <div key={idx}>\r\n                       <strong>{buffName}:</strong> {buffValue}%\r\n                     </div>\r\n                   ))}\r\n"
                }
            ],
            "date": 1723960436705,
            "name": "Commit-0",
            "content": "import React, { useState } from 'react';\r\nimport styles from './index.module.scss'; // Import CSS module for styling\r\n\r\nconst Modal = ({ show, onClose, castle, handleInputChange, handleSave }: any) => {\r\n  const [newCastle, setNewCastle] = useState('');\r\n  const [newBuffName, setNewBuffName] = useState('');\r\n  const [newBuffValue, setNewBuffValue] = useState('');\r\n\r\n  if (!show || !castle) return null;\r\n\r\n  const addCastle = () => {\r\n    if (newCastle.trim()) {\r\n      handleInputChange('castles', [...castle.castles, newCastle.trim()]);\r\n      setNewCastle('');\r\n    }\r\n  };\r\n\r\n  const addBuff = () => {\r\n    if (newBuffName.trim() && newBuffValue.trim()) {\r\n      const newBuff = { [newBuffName.trim()]: newBuffValue.trim() };\r\n      handleInputChange('buff', [...castle.buff, newBuff]);\r\n      setNewBuffName('');\r\n      setNewBuffValue('');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={styles.modal}>\r\n      <div className={styles.modalContent}>\r\n        <h2>Edit Castle</h2>\r\n        <form>\r\n          {/* Skin Type */}\r\n          <div className={styles.inputContainer}>\r\n            <label>Skin Type</label>\r\n            <input\r\n              type=\"text\"\r\n              value={castle.skintype || ''}\r\n              onChange={(e) => handleInputChange('skintype', e.target.value)}\r\n            />\r\n          </div>\r\n\r\n          {/* Photo URL */}\r\n          <div className={styles.inputContainer}>\r\n            <label>Photo URL</label>\r\n            <input\r\n              type=\"text\"\r\n              value={castle.photo ? castle.photo[0] : ''} // Assuming photo is an array, take the first element\r\n              onChange={(e) => handleInputChange('photo', [e.target.value])} // Convert value to array\r\n            />\r\n          </div>\r\n\r\n          {/* Castles (multiple values) */}\r\n          <div className={styles.inputContainer}>\r\n            <label>Castles</label>\r\n            <input\r\n              type=\"text\"\r\n              value={castle.castles ? castle.castles.join(', ') : ''} // Join array elements with a comma and space\r\n              onChange={(e) => handleInputChange('castles', e.target.value.split(',').map(item => item.trim()))} // Split by comma and trim whitespace\r\n            />\r\n            <input\r\n              type=\"text\"\r\n              value={newCastle}\r\n              onChange={(e) => setNewCastle(e.target.value)}\r\n              placeholder=\"Add new castle\"\r\n            />\r\n            <button type=\"button\" onClick={addCastle}>Add Castle</button>\r\n          </div>\r\n\r\n          {/* Quantity */}\r\n          <div className={styles.inputContainer}>\r\n            <label>Quantity</label>\r\n            <input\r\n              type=\"number\"\r\n              value={castle.quantity || ''}\r\n              onChange={(e) => handleInputChange('quantity', e.target.value)}\r\n            />\r\n          </div>\r\n\r\n          {/* Permalink */}\r\n          <div className={styles.inputContainer}>\r\n            <label>Permalink</label>\r\n            <input\r\n              type=\"text\"\r\n              value={castle.permalink || ''}\r\n              onChange={(e) => handleInputChange('permalink', e.target.value)}\r\n            />\r\n          </div>\r\n\r\n          {/* Buff (multiple values) */}\r\n          <div className={styles.inputContainer}>\r\n            <label>Buff</label>\r\n            <div>\r\n              {castle.buff && castle.buff.map((buffObject: any, index: number) => (\r\n                <div key={index}>\r\n                  {Object.entries(buffObject).map(([buffName, buffValue]: [string, string], idx: number) => (\r\n                    <div key={idx}>\r\n                      <strong>{buffName}:</strong> {buffValue}%\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              ))}\r\n            </div>\r\n            <input\r\n              type=\"text\"\r\n              value={newBuffName}\r\n              onChange={(e) => setNewBuffName(e.target.value)}\r\n              placeholder=\"Buff Name\"\r\n            />\r\n            <input\r\n              type=\"text\"\r\n              value={newBuffValue}\r\n              onChange={(e) => setNewBuffValue(e.target.value)}\r\n              placeholder=\"Buff Value (%)\"\r\n            />\r\n            <button type=\"button\" onClick={addBuff}>Add Buff</button>\r\n          </div>\r\n\r\n          {/* Save and Cancel buttons */}\r\n          <div className={styles.buttonContainer}>\r\n            <button type=\"button\" onClick={handleSave}>Save</button>\r\n            <button type=\"button\" onClick={onClose}>Cancel</button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Modal;\r\n"
        }
    ]
}