{
    "sourceFile": "Components/Sell/index.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1723957878576,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1723957961424,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,13 +1,12 @@\n-import React, { useState } from 'react';\r\n+import React from 'react';\r\n import styles from './index.module.scss'; // Import CSS module for styling\r\n \r\n // Define TypeScript types for the props\r\n interface Castle {\r\n   customerName?: string;\r\n   skintype?: string;\r\n   quantitySold?: number;\r\n-  castles?: string[]; // Add castles property\r\n }\r\n \r\n interface SellProps {\r\n   show: boolean;\r\n@@ -17,17 +16,10 @@\n   handleSave: () => void;\r\n }\r\n \r\n const Sell: React.FC<SellProps> = ({ show, onClose, castle, handleInputChange, handleSave }) => {\r\n-  const [selectedCastle, setSelectedCastle] = useState<string | null>(null);\r\n-\r\n   if (!show || !castle) return null;\r\n \r\n-  const handleCastleChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\r\n-    setSelectedCastle(event.target.value);\r\n-    handleInputChange('skintype', event.target.value); // Update the skintype or handle as needed\r\n-  };\r\n-\r\n   return (\r\n     <div className={styles.modal}>\r\n       <div className={styles.modalContent}>\r\n         <h2>Sell Castle</h2>\r\n@@ -41,23 +33,17 @@\n               onChange={(e) => handleInputChange('customerName', e.target.value)}\r\n             />\r\n           </div>\r\n \r\n-          {/* Skin Type Dropdown */}\r\n-          {castle.castles && (\r\n-            <div className={styles.inputContainer}>\r\n-              <label>Castle</label>\r\n-              <select\r\n-                value={selectedCastle || ''}\r\n-                onChange={handleCastleChange}\r\n-              >\r\n-                <option value=\"\" disabled>Select a castle</option>\r\n-                {castle.castles.map((castleName, index) => (\r\n-                  <option key={index} value={castleName}>{castleName}</option>\r\n-                ))}\r\n-              </select>\r\n-            </div>\r\n-          )}\r\n+          {/* Skin Type */}\r\n+          <div className={styles.inputContainer}>\r\n+            <label>Skin Type</label>\r\n+            <input\r\n+              type=\"text\"\r\n+              value={castle.skintype || ''}\r\n+              onChange={(e) => handleInputChange('skintype', e.target.value)}\r\n+            />\r\n+          </div>\r\n \r\n           {/* Quantity of Skins Sold */}\r\n           <div className={styles.inputContainer}>\r\n             <label>Quantity of Skins Sold</label>\r\n"
                },
                {
                    "date": 1723957982901,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,12 +1,13 @@\n-import React from 'react';\r\n+import React, { useState } from 'react';\r\n import styles from './index.module.scss'; // Import CSS module for styling\r\n \r\n // Define TypeScript types for the props\r\n interface Castle {\r\n   customerName?: string;\r\n   skintype?: string;\r\n   quantitySold?: number;\r\n+  castles?: string[]; // Add castles property\r\n }\r\n \r\n interface SellProps {\r\n   show: boolean;\r\n@@ -16,10 +17,17 @@\n   handleSave: () => void;\r\n }\r\n \r\n const Sell: React.FC<SellProps> = ({ show, onClose, castle, handleInputChange, handleSave }) => {\r\n+  const [selectedCastle, setSelectedCastle] = useState<string | null>(null);\r\n+\r\n   if (!show || !castle) return null;\r\n \r\n+  const handleCastleChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\r\n+    setSelectedCastle(event.target.value);\r\n+    handleInputChange('skintype', event.target.value); // Update the skintype or handle as needed\r\n+  };\r\n+\r\n   return (\r\n     <div className={styles.modal}>\r\n       <div className={styles.modalContent}>\r\n         <h2>Sell Castle</h2>\r\n@@ -33,18 +41,31 @@\n               onChange={(e) => handleInputChange('customerName', e.target.value)}\r\n             />\r\n           </div>\r\n \r\n-          {/* Skin Type */}\r\n-          <div className={styles.inputContainer}>\r\n+          {/* Skin Type Dropdown */}\r\n+          {castle.castles && (\r\n+            <div className={styles.inputContainer}>\r\n+              <label>Castle</label>\r\n+              <select\r\n+                value={selectedCastle || ''}\r\n+                onChange={handleCastleChange}\r\n+              >\r\n+                <option value=\"\" disabled>Select a castle</option>\r\n+                {castle.castles.map((castleName, index) => (\r\n+                  <option key={index} value={castleName}>{castleName}</option>\r\n+                ))}\r\n+              </select>\r\n+            </div>\r\n+          )}\r\n+   <div className={styles.inputContainer}>\r\n             <label>Skin Type</label>\r\n             <input\r\n               type=\"text\"\r\n               value={castle.skintype || ''}\r\n               onChange={(e) => handleInputChange('skintype', e.target.value)}\r\n             />\r\n           </div>\r\n-\r\n           {/* Quantity of Skins Sold */}\r\n           <div className={styles.inputContainer}>\r\n             <label>Quantity of Skins Sold</label>\r\n             <input\r\n"
                },
                {
                    "date": 1723959942024,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,97 @@\n+import React, { useState, useEffect } from 'react';\r\n+import styles from './index.module.scss'; // Import CSS module for styling\r\n+\r\n+// Define TypeScript types for the props\r\n+interface Castle {\r\n+  customerName?: string;\r\n+  skintype?: string;\r\n+  quantitySold?: number;\r\n+  castles?: string[]; // Add castles property\r\n+}\r\n+\r\n+interface SellProps {\r\n+  show: boolean;\r\n+  onClose: () => void;\r\n+  castle: Castle | null;\r\n+  handleInputChange: (field: keyof Castle, value: any) => void;\r\n+  handleSave: () => void;\r\n+}\r\n+\r\n+const Sell: React.FC<SellProps> = ({ show, onClose, castle, handleInputChange, handleSave }) => {\r\n+  const [selectedCastle, setSelectedCastle] = useState<string | null>(null);\r\n+\r\n+  useEffect(() => {\r\n+    if (castle && castle.castles && castle.castles.length > 0) {\r\n+      setSelectedCastle(castle.castles[0]); // Initialize with the first castle or null\r\n+    }\r\n+  }, [castle]);\r\n+\r\n+  if (!show || !castle) return null;\r\n+\r\n+  const handleCastleChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\r\n+    setSelectedCastle(event.target.value);\r\n+  };\r\n+\r\n+  return (\r\n+    <div className={styles.modal}>\r\n+      <div className={styles.modalContent}>\r\n+        <h2>Sell Castle</h2>\r\n+        <form>\r\n+          {/* Customer Name */}\r\n+          <div className={styles.inputContainer}>\r\n+            <label>Customer Name</label>\r\n+            <input\r\n+              type=\"text\"\r\n+              value={castle.customerName || ''}\r\n+              onChange={(e) => handleInputChange('customerName', e.target.value)}\r\n+            />\r\n+          </div>\r\n+\r\n+          {/* Castle Dropdown */}\r\n+          {castle.castles && (\r\n+            <div className={styles.inputContainer}>\r\n+              <label>Castle</label>\r\n+              <select\r\n+                value={selectedCastle || ''}\r\n+                onChange={handleCastleChange}\r\n+              >\r\n+                <option value=\"\" disabled>Select a castle</option>\r\n+                {castle.castles.map((castleName, index) => (\r\n+                  <option key={index} value={castleName}>{castleName}</option>\r\n+                ))}\r\n+              </select>\r\n+            </div>\r\n+          )}\r\n+\r\n+          {/* Skin Type */}\r\n+          <div className={styles.inputContainer}>\r\n+            <label>Skin Type</label>\r\n+            <input\r\n+              type=\"text\"\r\n+              value={castle.skintype || ''}\r\n+              onChange={(e) => handleInputChange('skintype', e.target.value)}\r\n+            />\r\n+          </div>\r\n+\r\n+          {/* Quantity of Skins Sold */}\r\n+          <div className={styles.inputContainer}>\r\n+            <label>Quantity of Skins Sold</label>\r\n+            <input\r\n+              type=\"number\"\r\n+              value={castle.quantitySold || ''}\r\n+              onChange={(e) => handleInputChange('quantitySold', e.target.value)}\r\n+            />\r\n+          </div>\r\n+\r\n+          {/* Save and Cancel buttons */}\r\n+          <div className={styles.buttonContainer}>\r\n+            <button type=\"button\" onClick={handleSave}>Save</button>\r\n+            <button type=\"button\" onClick={onClose}>Cancel</button>\r\n+          </div>\r\n+        </form>\r\n+      </div>\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+export default Sell;\r\n"
                }
            ],
            "date": 1723957878576,
            "name": "Commit-0",
            "content": "import React, { useState } from 'react';\r\nimport styles from './index.module.scss'; // Import CSS module for styling\r\n\r\n// Define TypeScript types for the props\r\ninterface Castle {\r\n  customerName?: string;\r\n  skintype?: string;\r\n  quantitySold?: number;\r\n  castles?: string[]; // Add castles property\r\n}\r\n\r\ninterface SellProps {\r\n  show: boolean;\r\n  onClose: () => void;\r\n  castle: Castle | null;\r\n  handleInputChange: (field: keyof Castle, value: any) => void;\r\n  handleSave: () => void;\r\n}\r\n\r\nconst Sell: React.FC<SellProps> = ({ show, onClose, castle, handleInputChange, handleSave }) => {\r\n  const [selectedCastle, setSelectedCastle] = useState<string | null>(null);\r\n\r\n  if (!show || !castle) return null;\r\n\r\n  const handleCastleChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\r\n    setSelectedCastle(event.target.value);\r\n    handleInputChange('skintype', event.target.value); // Update the skintype or handle as needed\r\n  };\r\n\r\n  return (\r\n    <div className={styles.modal}>\r\n      <div className={styles.modalContent}>\r\n        <h2>Sell Castle</h2>\r\n        <form>\r\n          {/* Customer Name */}\r\n          <div className={styles.inputContainer}>\r\n            <label>Customer Name</label>\r\n            <input\r\n              type=\"text\"\r\n              value={castle.customerName || ''}\r\n              onChange={(e) => handleInputChange('customerName', e.target.value)}\r\n            />\r\n          </div>\r\n\r\n          {/* Skin Type Dropdown */}\r\n          {castle.castles && (\r\n            <div className={styles.inputContainer}>\r\n              <label>Castle</label>\r\n              <select\r\n                value={selectedCastle || ''}\r\n                onChange={handleCastleChange}\r\n              >\r\n                <option value=\"\" disabled>Select a castle</option>\r\n                {castle.castles.map((castleName, index) => (\r\n                  <option key={index} value={castleName}>{castleName}</option>\r\n                ))}\r\n              </select>\r\n            </div>\r\n          )}\r\n\r\n          {/* Quantity of Skins Sold */}\r\n          <div className={styles.inputContainer}>\r\n            <label>Quantity of Skins Sold</label>\r\n            <input\r\n              type=\"number\"\r\n              value={castle.quantitySold || ''}\r\n              onChange={(e) => handleInputChange('quantitySold', e.target.value)}\r\n            />\r\n          </div>\r\n\r\n          {/* Save and Cancel buttons */}\r\n          <div className={styles.buttonContainer}>\r\n            <button type=\"button\" onClick={handleSave}>Save</button>\r\n            <button type=\"button\" onClick={onClose}>Cancel</button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Sell;\r\n"
        }
    ]
}